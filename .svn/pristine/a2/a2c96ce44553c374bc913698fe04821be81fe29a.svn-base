<template>
  <div class="isMap" ref="chartDom" style="height: 510px"></div>
</template>
<script>
import echarts from "echarts/lib/echarts";
import "echarts/extension/bmap/bmap";
// import mapData from "../../utils/mapcharts";
import { MP } from "../../map";
import { post, service } from "../../utils/request.js";
export default {
  props: {},
  data() {
    return {
      chart: null,
      mapAreaList: {},
      mapAreaLists: [],
      chartList: [],
      maxValue: "",
      ak: "aiM7jMPeUV9uEepWsxr642Plxqgfpvt9"
    };
  },

  created() {
    this.getData();
  },
  mounted() {
    // this.$nextTick(function() {
    //   var _this = this;
    //   MP(_this.ak).then(() => {
    //     this.drawECharts();
    //   });
    // });
    setTimeout(() => {
      MP(this.ak);
      this.drawECharts();
    }, 1200);
  },
  beforeDestroy() {
    if (!this.chart) {
      return;
    } else {
      this.chart.dispose();
      this.chart = null;
    }
  },
  methods: {
    getData() {
      post(service.areanum).then(res => {
        this.chartList = res.data.bodys;
        this.maxValue = this.chartList[0].value;
        for (let i = 0; i < this.chartList.length - 1; i++) {
          this.maxValue =
            this.maxValue < this.chartList[i + 1].value
              ? this.chartList[i + 1].value
              : this.maxValue;
        }
      });
      post(service.getAreacode).then(res => {
        this.mapAreaLists = res.data.bodys;
        this.mapAreaList = {};
        this.mapAreaLists.map(item => {
          item.coordinate = item.coordinate.slice(
            1,
            item.coordinate.length - 1
          );
          item.coordinate = item.coordinate.split(",");
          item.coordinate[0] = Number(item.coordinate[0]);
          item.coordinate[1] = Number(item.coordinate[1]);
          this.mapAreaList[item.name] = item.coordinate;
        });
      });
    },
    convertData(data) {
      var res = [];
      for (var i = 0; i < data.length; i++) {
        var geoCoord = this.mapAreaList[data[i].name];
        if (geoCoord) {
          res.push({
            name: data[i].name,
            value: geoCoord.concat(data[i].value)
          });
        }
      }
      return res;
    },

    drawECharts() {
      this.chart = echarts.init(this.$refs.chartDom);
      var option = {};
      var that = this;
      option = {
        title: {
          text: "2020年度全国理赔案件分布图",
          sublink: "",
          left: "center",
          top: "10",
          textStyle: {
            color: "#555"
          }
        },
        tooltip: {
          trigger: "item",
          formatter: function(params) {
            return params.name + ":" + params.value[2];
          }
        },
        bmap: {
          center: [115.114129, 35.550339],
          zoom: 6,
          roam: true,
          mapStyle: {
            styleJson: [
              {
                featureType: "water",
                elementType: "all",
                stylers: {
                  color: "#d1d1d1"
                }
              },
              {
                featureType: "land",
                elementType: "all",
                stylers: {
                  color: "#f3f3f3"
                }
              },
              {
                featureType: "railway",
                elementType: "all",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "highway",
                elementType: "all",
                stylers: {
                  color: "#fdfdfd"
                }
              },
              {
                featureType: "highway",
                elementType: "labels",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "arterial",
                elementType: "geometry",
                stylers: {
                  color: "#fefefe"
                }
              },
              {
                featureType: "arterial",
                elementType: "geometry.fill",
                stylers: {
                  color: "#fefefe"
                }
              },
              {
                featureType: "poi",
                elementType: "all",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "green",
                elementType: "all",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "subway",
                elementType: "all",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "manmade",
                elementType: "all",
                stylers: {
                  color: "#d1d1d1"
                }
              },
              {
                featureType: "local",
                elementType: "all",
                stylers: {
                  color: "#d1d1d1"
                }
              },
              {
                featureType: "arterial",
                elementType: "labels",
                stylers: {
                  visibility: "off"
                }
              },
              {
                featureType: "boundary",
                elementType: "all",
                stylers: {
                  color: "#fefefe"
                }
              },
              {
                featureType: "building",
                elementType: "all",
                stylers: {
                  color: "#d1d1d1"
                }
              },
              {
                featureType: "label",
                elementType: "labels.text.fill",
                stylers: {
                  color: "#999999"
                }
              }
            ]
          }
        },
        series: [
          {
            name: "",
            type: "effectScatter",
            coordinateSystem: "bmap",
            data: this.convertData(
              this.chartList.sort(function(a, b) {
                return b.value - a.value;
              })
            ),
            symbolSize: function(val) {
              if ((val[2] / that.maxValue) * 80 <= 10) {
                return 10;
              } else {
                return (val[2] / that.maxValue) * 80;
              }
              // if (val[2] < 50) {
              //   return 10;
              // } else if (val[2] < 100) {
              //   return 30;
              // } else if (val[2] < 150) {
              //   return 50;
              // } else if (val[2] < 200) {
              //   return 70;
              // } else if (val[2] >= 200) {
              //   return 80;
              // }
            },
            showEffectOn: "render",
            rippleEffect: {
              brushType: "stroke"
            },
            hoverAnimation: true,
            label: {
              normal: {
                formatter: "{b}",
                position: "right"
                // show: true
              }
            },
            itemStyle: {
              normal: {
                color: " #0673ff",
                shadowBlur: 10,
                shadowColor: "#333"
              }
            },
            zlevel: 1
          }
        ]
      };
      // if (option && typeof option === "object") {
      this.chart.setOption(option, true);
      // }
    }
  }
};
</script>
<style lang="less" scope>
.isMap {
  /deep/.anchorBL {
    display: none !important;
  }
}
</style>  