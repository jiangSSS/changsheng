<template>
  <div class="addFiling" id="addFiling" ref="addFiling">
    <div class="left">
      <el-form
        ref="objForm"
        :model="objForm"
        v-model="labelPosition"
        :rules="rules"
        label-width="140px"
        :validate-on-rule-change="false"
      >
        <el-collapse v-model="activeName" ref="one">
          <el-collapse-item name="1" id="0">
            <template slot="title">
              出险人信息
              <i
                class="header-icon el-icon-caret-bottom"
                style="margin: 0 0 0 auto;font-size: 30px;"
              ></i>
            </template>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="出险人姓名" prop="occname">
                    <el-input v-model="objForm.occname" disabled></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="出险人证件类型" prop="occidtype">
                    <el-select v-model="objForm.occidtype" clearable placeholder="请选择" disabled>
                      <el-option
                        v-for="item in cardTypeList"
                        :key="item.code"
                        :label="item.codename"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="出险人证件号码" prop="occidno">
                    <el-input v-model="objForm.occidno" disabled></el-input>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="出险人性别" prop="sex">
                    <el-select v-model="objForm.sex" clearable placeholder="请选择" disabled>
                      <el-option
                        v-for="item in sexList"
                        :key="item.code"
                        :label="item.codename"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="出险人年龄" prop="age">
                    <el-input v-model="objForm.age" disabled></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="电话号码"
                    prop="remark"
                    :rules="objForm.remark != null && objForm.remark != ''?rules.remark:[{ required: false, message: '请输入', trigger: 'blur' }]"
                  >
                    <el-input v-model="objForm.remark" maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>

            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="证件有效期止期"
                    prop="idenddate"
                    :rules="objForm.occidtype==='1'?rules.idenddate:[{ required: false, message: '请选择证件有效期止期', trigger: 'blur' }]"
                  >
                    <el-date-picker
                      v-model="objForm.idenddate"
                      type="date"
                      placeholder="选择日期"
                      value-format="yyyy-MM-dd"
                    ></el-date-picker>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="来源渠道">
                    <el-input v-model="rgtclass" disabled maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8" v-if="!rgtno">
                <div class="grid-content" style="text-align:right;margin-right:30px;">
                  <el-button type="primary" round @click="toRiskList" style="text-align:right;">客户查询</el-button>
                </div>
              </el-col>
            </el-row>
            <el-row style="visibility:hidden;height:0px">
              <el-input v-model="objForm.homeprovince" maxlength="100"></el-input>
              <el-input v-model="objForm.homecity" maxlength="100"></el-input>
              <el-input v-model="objForm.homecounty" maxlength="100"></el-input>
              <el-input v-model="objForm.homecommunity" maxlength="100"></el-input>
            </el-row>
          </el-collapse-item>
        </el-collapse>

        <div id="1"></div>
        <div id="2"></div>
        <div id="3"></div>
        <el-tabs
          v-model="active"
          type="card"
          @tab-click="handleClick"
          style="margin-bottom:20px;"
          v-if="customerno"
        >
          <div :style="style1" :class="isbox ? 'box' : ''"></div>

          <el-tab-pane label="保单信息查询" name="first">
            <el-table
              :data="policyArr1.slice((currentPage1-1)*pagesize,currentPage1*pagesize)"
              style="width: 100%"
              :row-key="getRowKeys"
              :expand-row-keys="expands"
              @expand-change="zydescription"
            >
              <el-table-column type="expand">
                <!-- <template slot-scope="props"> -->
                <template>
                  <el-table
                    :data="policydetail"
                    class="sonTable"
                    border
                    style="width: 100%"
                    :header-cell-style="{background:'#F7FAFF'}"
                    :row-style="{background:'#F7FAFF'}"
                  >
                    <el-table-column type="index" width="50" align="center" label="序号"></el-table-column>
                    <el-table-column prop="riskname" label="险种名称" align="center" width="150"></el-table-column>
                    <el-table-column prop="riskcode" label="险种代码" align="center" width="100"></el-table-column>
                    <el-table-column prop="amnt" label="保险金额" align="center" width="100"></el-table-column>
                    <el-table-column prop="uwstate" label="险种状态" align="center" width="100"></el-table-column>
                    <el-table-column prop="cvalidate" label="生效日期" align="center" width="100"></el-table-column>
                    <el-table-column prop="prem" label="应交保费" align="center" width="100"></el-table-column>
                    <el-table-column prop="payenddate" label="实际缴费期满日" align="center" width="100"></el-table-column>
                    <el-table-column prop="enddate" label="实际期满日" align="center" width="100"></el-table-column>
                    <el-table-column prop="uwflag" label="核保决定" align="center" width="100"></el-table-column>
                  </el-table>
                </template>
              </el-table-column>
              <el-table-column
                label="序号"
                type="index"
                align="center"
                width="50"
                :index="indexMethod1"
              ></el-table-column>
              <el-table-column prop="contno" label="保单号" align="center" width="120"></el-table-column>
              <el-table-column prop="appntname" label="投保人" align="center" width="120"></el-table-column>
              <el-table-column prop="insuredname" label="被保险人" align="center" width="130"></el-table-column>
              <el-table-column prop="riskname" label="主险名称" align="center" width="130"></el-table-column>
              <el-table-column prop="polstate" label="保单状态" align="center" width="100"></el-table-column>
              <el-table-column prop="cvalidate" label="生效日期" align="center" width="100"></el-table-column>
              <el-table-column prop="payenddate" label="实际缴费期满日" align="center" width="150"></el-table-column>
              <el-table-column prop="enddate" label="实际期满日" align="center" width="100"></el-table-column>
              <el-table-column prop="claimflag" label="挂起标志" align="center" width="100"></el-table-column>
              <el-table-column prop="suspension" label="挂起原因" align="center" width="100"></el-table-column>
              <el-table-column prop="appflag" label="团个标志" align="center" width="100"></el-table-column>
              <el-table-column prop="salechnl" label="渠道" align="center" width="100"></el-table-column>
            </el-table>
            <el-pagination
              background
              @size-change="currentPage1"
              @current-change="currentChange1(currentPage1)"
              :current-page.sync="currentPage1"
              :page-size="10"
              layout="prev, pager, next, jumper"
              :total="total1"
            ></el-pagination>
          </el-tab-pane>

          <el-tab-pane label="既往赔案查询" name="second">
            <el-table
              style="width: 100%"
              :data="policyArr2.slice((currentPage2-1)*pagesize,currentPage2*pagesize)"
            >
              <el-table-column type="index" width="50" label="序号" :index="indexMethod2"></el-table-column>
              <el-table-column prop="accno" label="事件号" align="center" width="140"></el-table-column>
              <el-table-column prop="rgtno" label="理赔号" align="center" width="140"></el-table-column>
              <el-table-column prop="customername" label="出险人" align="center" width="140"></el-table-column>
              <el-table-column prop="rgtantname" label="申请人" align="center" width="140"></el-table-column>
              <el-table-column prop="accstartdate" label="出险日期" align="center" width="120"></el-table-column>
              <el-table-column prop="outtype" label="出险类型" align="center" width="100"></el-table-column>
              <el-table-column prop="accidentreason" label="事故原因" align="center" width="140"></el-table-column>
              <el-table-column prop="inqconclusion" label="是否调查" align="center" width="80"></el-table-column>
              <el-table-column prop="disease" label="诊断" align="center" width="140"></el-table-column>
              <el-table-column prop="applydate" label="申请日期" align="center" width="120"></el-table-column>
              <el-table-column prop="endcasedate" label="结案日期" align="center" width="120"></el-table-column>
              <el-table-column prop="rgtstate" label="案件状态" align="center" width="100"></el-table-column>
              <el-table-column prop="claimconclusion" label="理赔结论" align="center" width="140"></el-table-column>
              <el-table-column prop="realpay" label="赔付金额" align="center" width="100"></el-table-column>
              <el-table-column label="理赔进展" align="center" width="80">
                <template slot-scope="scope" v-if="scope.row.remarks">
                  <!-- <el-popover placement="top-start" trigger="hover" width="200">
                    <div>{{scope.row.remarks}}</div>
                    <template slot="reference" style="border:none;">
                      <img
                        src="../../assets/images/filing/warn.png"
                        alt
                        style="width:20px;height:20px"
                      />
                    </template>
                  </el-popover>-->
                  <el-popover
                    placement="top-start"
                    popper-class="lipeiPopover"
                    trigger="hover"
                    width="600"
                  >
                    <el-timeline>
                      <el-timeline-item
                        v-for="(items,index) in scope.row.remarks"
                        :key="index"
                        placement="top"
                        :timestamp="items.transdate"
                        color="#0673ff"
                      >
                        <div style="font-weight:700">{{items.crtusr}}</div>
                        <div>{{items.remark}}</div>
                      </el-timeline-item>
                    </el-timeline>
                    <template slot="reference" style="border:none;">
                      <img
                        src="../../assets/images/filing/warn.png"
                        alt
                        style="width:20px;height:20px"
                      />
                    </template>
                  </el-popover>
                </template>
              </el-table-column>
            </el-table>
            <div style="margin-top:10px;">
              <el-pagination
                background
                @size-change="currentPage2"
                @current-change="currentChange2(currentPage2)"
                :current-page.sync="currentPage2"
                :page-size="10"
                layout="prev, pager, next, jumper"
                :total="total2"
              ></el-pagination>
            </div>
          </el-tab-pane>

          <el-tab-pane label="保全记录" name="third">
            <el-table
              :data="policyArr3.slice((currentPage3-1)*pagesize,currentPage3*pagesize)"
              style="width: 100%"
            >
              <el-table-column type="index" width="50" label="序号" :index="indexMethod3"></el-table-column>
              <el-table-column prop="contno" label="保单号" align="center" width="120"></el-table-column>
              <el-table-column prop="posnumber" label="pos交易流水号" align="center" width="140"></el-table-column>
              <el-table-column prop="edorappdate" label="申请收到日" align="center" width="100"></el-table-column>
              <el-table-column prop="edortype" label="保全类型" align="center" width="150"></el-table-column>
              <el-table-column prop="edorstate" label="保全状态" align="center" width="120"></el-table-column>
              <el-table-column prop="edorvalidate" label="保全生效日期" align="center" width="120"></el-table-column>
              <el-table-column prop="operator" label="操作人" align="center" width="120"></el-table-column>
              <el-table-column prop="edorappdate" label="操作日" align="center" width="100"></el-table-column>
              <el-table-column prop="salechnl" label="渠道" align="center" width="120"></el-table-column>
              <el-table-column prop="edorappdate" label="提交时间" align="center" width="100"></el-table-column>
            </el-table>
            <div style="margin-top:10px;">
              <el-pagination
                background
                @size-change="currentPage3"
                @current-change="currentChange3(currentPage3)"
                :current-page.sync="currentPage3"
                :page-size="10"
                layout="prev, pager, next, jumper"
                :total="total3"
              ></el-pagination>
            </div>
          </el-tab-pane>
        </el-tabs>

        <el-collapse v-model="activeName">
          <el-collapse-item name="2" id="4">
            <template slot="title">
              立案申请信息
              <i
                class="header-icon el-icon-caret-bottom"
                style="margin: 0 0px 0 auto;font-size: 30px;"
              ></i>
            </template>

            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="理赔号">
                    <el-input v-model="objForm.rgtno" disabled></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="申请日期" prop="applydate">
                    <el-date-picker
                      type="date"
                      placeholder="选择日期"
                      v-model="objForm.applydate"
                      style="width: 100%;"
                      value-format="yyyy-MM-dd"
                    ></el-date-picker>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content" style="margin-left:17px;">
                  <el-button type="primary" round @click="toMarketerSelection">营销员查询与关联</el-button>
                  <!-- :disabled="flagBtn" -->
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="保单号" prop="contno">
                    <el-input v-model="objForm.contno" maxlength="10"></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <!-- <span v-model="objForm.agentcode" style="display:none;"></span> -->
              <span style="display:none;">{{objForm.agentcode}}</span>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="营销员电话">
                    <el-input v-model="objForm.agentphone" disabled></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="是否通知营销员" prop="notice">
                    <el-select v-model="objForm.notice" placeholder="请选择" clearable>
                      <el-option label="是" value="1"></el-option>
                      <el-option label="否" value="0"></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
          </el-collapse-item>
        </el-collapse>

        <el-collapse v-model="activeName">
          <el-collapse-item name="3" id="5">
            <template slot="title">
              出险信息
              <i
                class="header-icon el-icon-caret-bottom"
                style="margin: 0 0px 0 auto;font-size: 30px;"
              ></i>
            </template>

            <el-row style="padding-top:10px;height:52px;">
              <el-col :span="8" style="height:52px;">
                <div class="grid-content">
                  <el-form-item label="出险类型" prop="accidenttype">
                    <el-radio-group v-model="objForm.accidenttype" @change="changeAcc()">
                      <el-radio
                        v-for="item in accidenttypeList"
                        :label="item.code"
                        :key="item.code"
                      >{{item.codename}}</el-radio>
                    </el-radio-group>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8" style="height:52px;">
                <div class="grid-content">
                  <el-form-item label="直付标志">
                    <el-switch
                      v-model="objForm.directpay"
                      active-value="1"
                      inactive-value="0"
                      active-color="#13ce66"
                      inactive-color="#ff4949"
                    ></el-switch>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>

            <el-row style="height:52px;" class="reasoncodeSty">
              <el-col :span="24" style="height:52px;">
                <el-form-item
                  style="margin-bottom:0px;"
                  label="理赔类型"
                  prop="reasoncode"
                  :rules="confirm?[{ required: true, message: '理赔类型不能为空！', trigger: 'blur' }]:rules.reasoncode"
                >
                  <!-- :disabled="item.code != '105'" -->
                  <el-checkbox-group v-model="objForm.reasoncode">
                    <!-- :disabled="item.code != '105'" -->

                    <el-checkbox
                      v-for="(item) in llclaimtypeList"
                      :key="item.code"
                      :label="item.code"
                    >{{item.codename}}</el-checkbox>
                  </el-checkbox-group>
                </el-form-item>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="出险日期" prop="accidentdate">
                    <el-date-picker
                      type="date"
                      placeholder="选择日期"
                      v-model="objForm.accidentdate"
                      style="width: 100%;"
                      value-format="yyyy-MM-dd"
                    ></el-date-picker>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="事故原因"
                    prop="accidentreason"
                    :rules="objForm.accidenttype==='02'?rules.accidentReason:[{ required: false, message: '事故原因不能为空！', trigger: 'blur' }]"
                  >
                    <el-select
                      v-model="objForm.accidentreason"
                      clearable
                      placeholder="请选择"
                      filterable
                    >
                      <el-option
                        v-for="item in accReasonList"
                        :key="item.code"
                        :label="item.codename"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="意外事故受伤程度"
                    prop="accdegree"
                    :rules="objForm.accidenttype==='02'?rules.accdegree:[{ required: false, message: '事故原因不能为空！', trigger: 'blur' }]"
                  >
                    <el-select v-model="objForm.accdegree" clearable placeholder="请选择">
                      <el-option
                        v-for="item in shoushangList"
                        :key="item.code"
                        :label="item.codename"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <!-- <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="出险结果" prop="accidentcourse">
                    <el-select
                      v-model="objForm.accidentcourse"
                      filterable
                      placeholder="请选择"
                      clearable
                      v-el-select-loadmore="loadmore1"
                    >
                      <el-option
                        v-for="item in riskResultList"
                        :key="item.code"
                        :label="item.codename"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>-->
              <el-col :span="21">
                <div class="grid-content place">
                  <el-form-item
                    label="出险地点"
                    prop="accprovince"
                    :rules="objForm.accidenttype==='02'?rules.accprovince:[{ required: false, message: '省不能为空！', trigger: 'blur' }]"
                  >
                    <el-select
                      v-model="objForm.accprovince"
                      placeholder="省"
                      clearable
                      filterable
                      @change="changevince(objForm.accprovince)"
                      @clear="clearMes()"
                    >
                      <el-option
                        v-for="item in provinceList"
                        :key="item.code"
                        :label="item.province"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>

                  <el-form-item
                    label
                    prop="acccity"
                    :rules="objForm.accidenttype==='02'&&objForm.accprovince!=='999999'?rules.acccity:[{ required: false, message: '市不能为空！', trigger: 'blur' }]"
                    class="risk_address"
                  >
                    <el-select
                      v-model="objForm.acccity"
                      clearable
                      filterable
                      placeholder="市"
                      @change="changaccity(objForm.acccity)"
                      ref="acccity"
                      @clear="clearArea()"
                    >
                      <el-option
                        v-for="item in cityList"
                        :key="item.code"
                        :label="item.city"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>

                  <el-form-item
                    label
                    prop="acccounty"
                    :rules="objForm.accidenttype==='02'&&objForm.accprovince!=='999999'?rules.acccounty:[{ required: false, message: '市不能为空！', trigger: 'blur' }]"
                    class="risk_address"
                  >
                    <el-select
                      v-model="objForm.acccounty"
                      placeholder="区"
                      clearable
                      filterable
                      @change="changeCounty()"
                    >
                      <el-option
                        v-for="item in areaList"
                        :key="item.code"
                        :label="item.country"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>

                  <el-form-item
                    label
                    prop="accaddress"
                    :rules="objForm.accidenttype==='02'?rules.accaddress:[{ required: false, message: '市不能为空！', trigger: 'blur' }]"
                    class="risk_address"
                  >
                    <el-input
                      v-model="objForm.accaddress"
                      placeholder="详细地址"
                      maxlength="100"
                      class="place_des"
                    ></el-input>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="事故发生地点性质"
                    prop="accidentsite"
                    :rules="objForm.accidenttype==='02'?rules.accidentsite:[{ required: false, message: '事故发生地点性质不能为空！', trigger: 'change' }]"
                  >
                    <el-cascader v-model="objForm.accidentsite" :options="placeOptions" clearable></el-cascader>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="就诊医院"
                    prop="hospitalname"
                    :rules="objForm.accidenttype=='01'?rules.hospitalname:[{ required: false, message: '不能为空！', trigger: 'blur' }]"
                  >
                    <template>
                      <el-select
                        class="jiuzhenhosp"
                        v-model="objForm.hospitalname"
                        filterable
                        placeholder="请选择"
                        clearable
                        :filter-method="filtered"
                        @change="changeHospital(objForm.hospitalname)"
                        @focus="clearHospital(objForm.hospitalname)"
                        v-el-select-loadmore="loadmore"
                      >
                        <el-option
                          v-for="(item) in hospitalLists"
                          :key="item.hospitcode"
                          :label="item.hospitalname"
                          :value="item.hospitcode"
                        ></el-option>
                      </el-select>
                      <el-popover
                        v-if="remarkContents && objForm.hospitalname"
                        placement="top-start"
                        width="200"
                        trigger="hover"
                        content="这"
                      >
                        <div>{{remarkContents}}</div>
                        <el-button slot="reference" class="jiuzhens">
                          <img
                            src="../../assets/images/filing/warn.png"
                            alt
                            style="width:20px;height:20px"
                          />
                        </el-button>
                      </el-popover>
                    </template>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="病区">
                    <el-input v-model="objForm.hospitallesion" maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="床位">
                    <el-input v-model="objForm.hospitalbed" maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="确诊日期"
                    prop="dianosedate"
                    :rules="objForm.reasoncode.indexOf('102')!==-1?rules.dianosedate:[{ required: false, message: '事故发生地点性质不能为空！', trigger: 'blur' }]"
                  >
                    <el-date-picker
                      type="date"
                      placeholder="选择日期"
                      v-model="objForm.dianosedate"
                      style="width: 100%;"
                      value-format="yyyy-MM-dd"
                    ></el-date-picker>
                  </el-form-item>
                </div>
              </el-col>

              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="身故日期"
                    prop="deathdate"
                    :rules="objForm.reasoncode.indexOf('100')!==-1?rules.deathdate:[{ required: false, message: '事故发生地点性质不能为空！', trigger: 'blur' }]"
                  >
                    <el-date-picker
                      type="date"
                      placeholder="选择日期"
                      v-model="objForm.deathdate"
                      style="width: 100%;"
                      value-format="yyyy-MM-dd"
                    ></el-date-picker>
                  </el-form-item>
                </div>
              </el-col>
              <!-- <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="入院日期">
                    <el-date-picker
                      type="date"
                      placeholder="选择日期"
                      v-model="objForm.inhospitaldate"
                      style="width: 100%;"
                      value-format="yyyy-MM-dd"
                    ></el-date-picker>
                  </el-form-item>
                </div>
              </el-col>-->

              <!-- <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="出院日期">
                    <el-date-picker
                      type="date"
                      placeholder="选择日期"
                      v-model="objForm.outhospitaldate"
                      style="width: 100%;"
                      value-format="yyyy-MM-dd"
                    ></el-date-picker>
                  </el-form-item>
                </div>
              </el-col>-->
            </el-row>
            <el-row>
              <!-- <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="疾病分类"
                    prop="dieasetype"
                    :rules="objForm.accidenttype=='01'?rules.dieasetype:[{ required: false, message: '请输入', trigger: 'blur' }]"
                  >
                    <el-radio-group v-model="objForm.dieasetype">
                      <el-radio label="1">恶性肿瘤</el-radio>
                      <el-radio label="2">非恶性肿瘤</el-radio>
                    </el-radio-group>
                  </el-form-item>
                </div>
              </el-col>-->

              <!-- <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="诊断依据" prop="dianobasis">
                    <el-select
                      v-model="objForm.dianobasis"
                      clearable
                      placeholder="请选择"
                      multiple
                      collapse-tags
                    >
                      <el-option
                        v-for="item in dianoBasis"
                        :key="item.value"
                        :label="item.text"
                        :value="item.value"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>-->
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="受益人是否指定"
                    prop="pointbnf"
                    :rules="objForm.reasoncode.indexOf('100')!==-1?rules.pointbnf:[{ required: false, message: '请输入', trigger: 'blur' }]"
                  >
                    <el-radio-group v-model="objForm.pointbnf">
                      <el-radio label="1">是</el-radio>
                      <el-radio label="0">否</el-radio>
                    </el-radio-group>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="申请豁免原因"
                    prop="exempt"
                    :rules="objForm.reasoncode.indexOf('104')!==-1 ? rules.exempt:[{ required: false, message: '请输入', trigger: 'blur' }]"
                  >
                    <el-select
                      v-if="objForm.accidenttype==='01'"
                      v-model="objForm.exempt"
                      clearable
                      placeholder="请选择"
                    >
                      <el-option
                        v-for="item in resource"
                        :key="item.value"
                        :label="item.text"
                        :value="item.value"
                      ></el-option>
                    </el-select>

                    <el-select
                      v-else-if="objForm.accidenttype==='02'"
                      v-model="objForm.exempt"
                      clearable
                      placeholder="请选择"
                    >
                      <el-option
                        v-for="item in resource1"
                        :key="item.value"
                        :label="item.text"
                        :value="item.value"
                      ></el-option>
                    </el-select>

                    <el-select v-else v-model="objForm.exempt" clearable placeholder="请选择">
                      <el-option
                        v-for="item in resource2"
                        :key="item.value"
                        :label="item.text"
                        :value="item.value"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="伤残鉴定报告"
                    prop="disableddrpt"
                    :rules="objForm.reasoncode.indexOf('101')!==-1||objForm.reasoncode.indexOf('103')!==-1||objForm.reasoncode.indexOf('104')!==-1||objForm.reasoncode.indexOf('6')!==-1||objForm.reasoncode.indexOf('7')!==-1?rules.disableddrpt:[{ required: false, message: '请输入', trigger: 'blur' }]"
                  >
                    <el-radio-group v-model="objForm.disableddrpt">
                      <el-radio label="1">是</el-radio>
                      <el-radio label="0">否</el-radio>
                    </el-radio-group>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    class="occuprptStyle"
                    label="工伤报告（失能鉴定、残疾证）"
                    prop="occuprpt"
                    :rules="objForm.reasoncode.indexOf('101')!==-1||objForm.reasoncode.indexOf('103')!==-1||objForm.reasoncode.indexOf('104')!==-1||objForm.reasoncode.indexOf('6')!==-1||objForm.reasoncode.indexOf('7')!==-1?rules.occuprpt:[{ required: false, message: '请输入', trigger: 'blur' }]"
                  >
                    <el-radio-group v-model="objForm.occuprpt">
                      <el-radio label="1">是</el-radio>
                      <el-radio label="0">否</el-radio>
                    </el-radio-group>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
          </el-collapse-item>
        </el-collapse>

        <el-collapse v-model="activeName">
          <el-collapse-item name="4" id="6">
            <template slot="title">
              申请人信息
              <i
                class="header-icon el-icon-caret-bottom"
                style="margin: 0 0px 0 auto;font-size: 30px;"
              ></i>
            </template>

            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="申请人姓名" prop="rgtantname">
                    <el-input v-model="objForm.rgtantname" maxlength="20" :disabled="unFlag"></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="申请人与出险人关系" prop="relation" class="occuprptStyle">
                    <el-select
                      v-model="objForm.relation"
                      placeholder="请选择"
                      clearable
                      @change="getRiskPer"
                    >
                      <el-option
                        v-for="item in relations"
                        :key="item.code"
                        :label="item.codename"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="证件类型" prop="rgtantidtype">
                    <el-select
                      v-model="objForm.rgtantidtype"
                      placeholder="请选择"
                      clearable
                      :disabled="unFlag"
                    >
                      <el-option
                        v-for="item in cardTypeList"
                        :key="item.code"
                        :label="item.codename"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content" v-if="objForm.relation=='00'">
                  <el-form-item
                    label="证件号码"
                    prop="rgtantidno"
                    :rules="objForm.relation=='00'?rules.rgtantidno1:[{ required: false, message: '证件号码不能为空！',trigger: 'blur'}]"
                  >
                    <el-input
                      v-model="objForm.rgtantidno"
                      :disabled="unFlag"
                      class="special"
                      @change="objForm.rgtantidno = ToCDB(objForm.rgtantidno)"
                      maxlength="100"
                    ></el-input>
                  </el-form-item>
                </div>

                <div class="grid-content" v-else>
                  <el-form-item
                    label="证件号码"
                    prop="rgtantidno"
                    v-if="objForm.rgtantidtype==='1'&&!objForm.relation=='00'"
                    :rules="objForm.rgtantidtype==='1'&&!objForm.relation=='00'?rules.rgtantidno:[{ required: false, message: '证件号码不能为空！',trigger: 'blur'}]"
                  >
                    <el-input
                      v-model="objForm.rgtantidno"
                      :disabled="unFlag"
                      class="special"
                      @change="objForm.rgtantidno = ToCDB(objForm.rgtantidno)"
                      maxlength="100"
                    ></el-input>
                  </el-form-item>
                  <el-form-item
                    label="证件号码"
                    prop="rgtantidno"
                    v-else-if="objForm.rgtantidtype==='2'||objForm.rgtantidtype==='8'&&!objForm.relation=='00'"
                    :rules="(objForm.rgtantidtype==='2'||objForm.rgtantidtype==='8')&&!objForm.relation=='00'?rules.passwork:[{ required: false, message: '证件号码不能为空！',trigger: 'blur'}]"
                  >
                    <el-input
                      v-model="objForm.rgtantidno"
                      :disabled="unFlag"
                      @change="objForm.rgtantidno = ToCDB(objForm.rgtantidno)"
                      maxlength="100"
                    ></el-input>
                  </el-form-item>
                  <el-form-item
                    label="证件号码"
                    prop="rgtantidno"
                    v-else
                    :rules="objForm.rgtantidtype!='2'&&objForm.rgtantidtype!=='8'&&objForm.rgtantidtype!='1'&&!objForm.relation=='00'?rules.document:[{ required: false, message: '证件号码不能为空！',trigger: 'blur'}]"
                  >
                    <el-input
                      v-model="objForm.rgtantidno"
                      :disabled="unFlag"
                      @change="objForm.rgtantidno = ToCDB(objForm.rgtantidno)"
                      maxlength="100"
                    ></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="移动电话" prop="rgtantmobile">
                    <el-input v-model="objForm.rgtantmobile" maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="邮政编码" prop="postcode">
                    <el-input v-model="objForm.postcode" maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="24">
                <div class="grid-content apply_address">
                  <el-form-item label="联系地址" prop="rgtantprovince">
                    <el-select
                      v-model="objForm.rgtantprovince"
                      placeholder="省"
                      clearable
                      filterable
                      @change="changevince3(objForm.rgtantprovince)"
                      @clear="clearMes1()"
                    >
                      <el-option
                        v-for="item in provinceList3"
                        :key="item.code"
                        :label="item.province"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                    <el-select
                      v-model="objForm.rgtantcity"
                      placeholder="市"
                      filterable
                      clearable
                      @change="changaccity3(objForm.rgtantcity)"
                      @clear="clearArea1()"
                    >
                      <el-option
                        v-for="item in cityList3"
                        :key="item.code"
                        :label="item.city"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                    <el-select
                      v-model="objForm.rgtantcounty"
                      placeholder="区"
                      filterable
                      clearable
                      @change="changeCounty3()"
                    >
                      <el-option
                        v-for="item in areaList3"
                        :key="item.code"
                        :label="item.country"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                    <span class="full">
                      <el-input v-model="objForm.rgtantaddress" placeholder="详细地址" maxlength="100"></el-input>
                    </span>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
          </el-collapse-item>
        </el-collapse>

        <el-collapse v-model="activeName">
          <el-collapse-item name="5" id="7">
            <template slot="title">
              领款人信息
              <i
                class="header-icon el-icon-caret-bottom"
                style="margin: 0 0 0 auto;font-size: 30px;"
              ></i>
            </template>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="与被保险人关系"
                    prop="relationtocont"
                    :rules="(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.receidno)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankname)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.relationtocont"
                  >
                    <el-select
                      v-model="objForm.relationtocont"
                      @change="toChangeRel(objForm.relationtocont)"
                      clearable
                      @clear="clearName()"
                    >
                      <el-option
                        v-for="item in linglist"
                        :key="item.id"
                        :label="item.name"
                        :value="item.id"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="账户所有人姓名"
                    prop="recename"
                    :rules="(!objForm.relationtocont)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.receidno)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankname)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.recename"
                  >
                    <!-- :disabled="!objForm.relationtocont || (objForm.receidtype != '10' && objForm.receidtype != '7')" -->
                    <el-input v-model="objForm.recename" disabled maxlength="20"></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <!-- <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    class="occuprptStyle"
                    label="账户所有人身份证件号码"
                    prop="receidno"
                    ref="receidno"
                    :rules="!objForm.receidno&&!objForm.contactway&&!objForm.bankaccno&&!objForm.headbankname&&!objForm.profession&&!objForm.annualincome&&!objForm.workunit&&!objForm.workaddress&&!objForm.receiveaccprovinc&&!objForm.recename?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.receidno"
                  >
                    <el-input
                      v-model="objForm.receidno"
                      class="special"
                      @change="objForm.receidno = ToCDB(objForm.receidno)"
                      maxlength="100"
                    ></el-input>
                  </el-form-item>
                </div>
              </el-col>-->
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="职业"
                    prop="profession"
                    ref="profession"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.receidno)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankname)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.profession"
                  >
                    <el-select                   
                      v-model="objForm.profession"                 
                      placeholder="请选择"
                      clearable
                      filterable
                      v-el-select-loadmore="loadmore2"
                    >
                      <el-option
                        v-for="item in workList"
                        :key="item.occupationcode"
                        :label="item.occuptionname"
                        :value="item.occupationcode"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="年收入"
                    prop="annualincome"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.receidtype)&&(!objForm.receidno)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankname)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.annualincome"
                  >
                    <el-input v-model="objForm.annualincome" maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="证件类型"
                    prop="receidtype"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidno)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankname)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.receidtype"
                  >
                    <el-select v-model="objForm.receidtype" placeholder="请选择" clearable>
                      <el-option
                        v-for="item in cardTypeList"
                        :key="item.code"
                        :label="item.codename"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="证件号码"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankname)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.receidno"
                    v-if="objForm.receidtype=='1'"
                  >
                    <el-input
                      v-model="objForm.receidno"
                      class="special"
                      @change="objForm.receidno = ToCDB(objForm.receidno)"
                      maxlength="100"
                    ></el-input>
                  </el-form-item>
                  <el-form-item
                    label="证件号码"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankname)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.receidno"
                    v-else-if="objForm.receidtype=='2'||objForm.receidtype=='7'"
                  >
                    <el-input
                      v-model="objForm.receidno"
                      @change="objForm.receidno = ToCDB(objForm.receidno)"
                      maxlength="100"
                    ></el-input>
                  </el-form-item>
                  <el-form-item
                    label="证件号码"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankname)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.receidno"
                    v-else
                  >
                    <el-input
                      v-model="objForm.receidno"
                      @change="objForm.receidno = ToCDB(objForm.receidno)"
                      maxlength="100"
                    ></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <!-- <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="证件有效止期"
                    prop="annualincome"
                    :rules="!objForm.receidno&&!objForm.contactway&&!objForm.bankaccno&&!objForm.headbankname&&!objForm.profession&&!objForm.annualincome&&!objForm.workunit&&!objForm.workaddress&&!objForm.receiveaccprovinc&&!objForm.recename?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.annualincome"
                  >
                    <el-input v-model="objForm.annualincome" maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>-->
            </el-row>
            <el-row>
              <el-col :span="16">
                <div class="grid-content bank">
                  <el-form-item
                    label="授权银行"
                    prop="headbankname"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.receidno)&&(!objForm.province)&&(!objForm.bankname)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.headbankname"
                  >
                    <el-select
                      v-model="objForm.headbankname"
                      filterable
                      placeholder="下拉模糊"
                      :filter-method="filtered3"
                      clearable
                      @change="getHeadBank()"
                      @clear="clearBank()"
                      v-el-select-loadmore="loadmore3"
                    >
                      <el-option
                        v-for="item in tBankList"
                        :key="item.bankid"
                        :label="item.bankname"
                        :value="item.bankid"
                      ></el-option>
                    </el-select>
                  </el-form-item>

                  <el-form-item
                    label
                    prop="province"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.receidno)&&(!objForm.headbankname)&&(!objForm.bankname)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.province"
                    class="bank_style"
                  >
                    <el-select
                      v-model="objForm.province"
                      filterable
                      placeholder="所在地区"
                      clearable
                      @focus="focusBank"
                      @change="getBanchBank(objForm.headbankname,objForm.province)"
                      :filter-method="filterBankP"
                      v-el-select-loadmore="loadmore4"
                    >
                      <el-option
                        v-for="item in bankAddressList"
                        :key="item.standardareasid"
                        :label="item.standardareasname"
                        :value="item.standardareasid"
                      ></el-option>
                    </el-select>
                  </el-form-item>

                  <el-form-item label class="bank_style">
                    <el-select v-model="objForm.bankname" filterable placeholder="支行" clearable>
                      <el-option
                        v-for="item in branchBankList"
                        :key="item.banklocationsid"
                        :label="item.banklocationsname"
                        :value="item.banklocationsid"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="授权账户号码"
                    prop="bankaccno"
                    ref="bankaccno"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.bankname)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.bankaccno"
                  >
                    <el-input
                      v-model="objForm.bankaccno"
                      maxlength="100"
                      ref="input"
                      @change="bankAccountBluer(objForm.bankaccno)"
                      @paste.native.capture.prevent="handlePaste"
                    ></el-input>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>

            <el-row>
              <el-col :span="24">
                <div class="grid-content address">
                  <el-form-item
                    label="联系地址"
                    prop="receiveaccprovinc"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.bankname)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankaccno)&&(!objForm.bankaccno)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.receiveaccprovinc"
                  >
                    <el-select
                      v-model="objForm.receiveaccprovinc"
                      clearable
                      filterable
                      placeholder="省"
                      @change="changevince2(objForm.receiveaccprovinc)"
                      @clear="clearMes2()"
                    >
                      <el-option
                        v-for="item in provinceList2"
                        :key="item.code"
                        :label="item.province"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>

                  <el-form-item
                    label
                    prop="receivecity"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.bankname)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankaccno)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.receivecity"
                    class="address_style"
                  >
                    <el-select
                      v-model="objForm.receivecity"
                      clearable
                      filterable
                      placeholder="市"
                      @change="changaccity2(objForm.receivecity)"
                      @clear="clearArea2()"
                    >
                      <el-option
                        v-for="item in cityList2"
                        :key="item.code"
                        :label="item.city"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>

                  <el-form-item
                    label
                    prop="receivedistrict"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.bankname)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankaccno)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receiveaddress)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.receivedistrict"
                    class="address_style"
                  >
                    <el-select
                      v-model="objForm.receivedistrict"
                      placeholder="区"
                      clearable
                      filterable
                      @change="changeCounty2()"
                    >
                      <el-option
                        v-for="item in areaList2"
                        :key="item.code"
                        :label="item.country"
                        :value="item.code"
                      ></el-option>
                    </el-select>
                  </el-form-item>
                  <el-form-item
                    label
                    prop="receiveaddress"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.bankname)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankaccno)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.contactway)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.receiveaddress"
                    class="address_style"
                  >
                    <span class="full">
                      <el-input v-model="objForm.receiveaddress" placeholder="详细地址" maxlength="100"></el-input>
                    </span>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="联系方式"
                    prop="contactway"
                    ref="contactway"
                    :rules="(!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.bankname)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankaccno)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.workunit)&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.contactway"
                  >
                    <el-input v-model="objForm.contactway" maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="单位名称"
                    prop="workunit"
                    :rules="((!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.bankname)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankaccno)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway))&&(!objForm.workaddress)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.workunit"
                  >
                    <el-input v-model="objForm.workunit" maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item
                    label="单位地址"
                    prop="workaddress"
                    :rules="((!objForm.relationtocont)&&(!objForm.recename)&&(!objForm.profession)&&(!objForm.annualincome)&&(!objForm.receidtype)&&(!objForm.bankname)&&(!objForm.headbankname)&&(!objForm.province)&&(!objForm.bankaccno)&&(!objForm.bankaccno)&&(!objForm.receiveaccprovinc)&&(!objForm.receivecity)&&(!objForm.receivedistrict)&&(!objForm.receiveaddress)&&(!objForm.contactway))&&(!objForm.workunit)?[{ required: false, message: '请输入', trigger: 'blur' }]:rules.workaddress"
                  >
                    <el-input v-model="objForm.workaddress" maxlength="100"></el-input>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
          </el-collapse-item>
        </el-collapse>
        <!-- <details-info
        :tableMes="tableMessage5,tableMessage1,tableMessage2,tableMessage3,tableMessage4"
        />-->

        <el-collapse v-model="activeName">
          <el-collapse-item name="6" id="8">
            <template slot="title">
              立案结论信息
              <i
                class="header-icon el-icon-caret-bottom"
                style="margin: 0 0 0 auto;font-size: 30px;"
              ></i>
            </template>

            <el-row style="padding-top:20px;">
              <el-col :span="8">
                <div class="grid-content">
                  <el-form-item label="立案结论" prop="rgtconclusion">
                    <el-select v-model="objForm.rgtconclusion" placeholder="请选择" clearable>
                      <el-option label="立案通过" value="01"></el-option>
                      <el-option label="不予立案" value="02"></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
              <el-col :span="9" v-if="objForm.rgtconclusion==='02'">
                <div class="grid-content">
                  <el-form-item
                    label="不予立案原因"
                    prop="norgtreason"
                    :rules="objForm.rgtconclusion==='02'?rules.norgtreason:[{ required: false, message: '请选择', trigger: 'blur' }]"
                  >
                    <el-select
                      v-model="objForm.norgtreason"
                      placeholder="请选择"
                      clearable
                      @change="changeR"
                    >
                      <el-option label="缺少资料" value="01"></el-option>
                      <el-option label="无匹配保单责任" value="02"></el-option>
                      <el-option label="微信预赔付金额可能≥3000元" value="03"></el-option>
                      <el-option label="重复立案" value="05"></el-option>
                      <el-option label="其他" value="04"></el-option>
                    </el-select>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="24" v-if="objForm.rgtconclusion==='02'">
                <div class="grid-content">
                  <el-form-item
                    label="原因说明"
                    prop="reasondetail"
                    :rules="objForm.rgtconclusion==='02'&&objForm.norgtreason!='05'?rules.reasondetail:[{ required: false, message: '请选择', trigger: 'blur' }]"
                  >
                    <!-- <el-input v-model="objForm.reasondetail" maxlength="100"></el-input> -->
                    <el-input
                      type="textarea"
                      :autosize="{ minRows: 3}"
                      maxlength="100"
                      show-word-limit
                      v-model="objForm.reasondetail"
                    ></el-input>
                  </el-form-item>
                </div>
              </el-col>
            </el-row>
          </el-collapse-item>
        </el-collapse>

        <div style="overflow:hidden;margin-bottom:50px;">
          <div style="float:right;margin:10px 10px 30px 0">
            <el-button
              type="primary"
              round
              @click="save2('objForm')"
              :disabled="disConfirmCase()"
            >立案确认</el-button>
            <el-button
              type="primary"
              round
              @click="noticepdfprint"
              :disabled="!objForm.rgtno"
            >不予立案通知书打印</el-button>
          </div>
        </div>
        <div class="botton_box">
          <div style="text-align:center;" class="button_style">
            <el-button type="primary" round @click="getHos">医疗单证录入</el-button>
            <!-- <el-button type="primary" round @click="toBeijing" :disabled="flagBtn">北京单证录入</el-button> -->
            <!-- <el-button type="primary" round v-if="zds == 'ZB' || zds == 'BJ'" @click="clickD">医疗单证录入</el-button> -->
            <el-button type="primary" round @click="toPhoto" :disabled="getPhotoState()">生成照会</el-button>
            <el-button type="primary" round @click="toInitiateSurvey()" :disabled="getState()">提起调查</el-button>
            <el-button type="primary" round @click="toInitImg">影像查询</el-button>
            <el-button type="primary" round @click="remarks()" :disabled="flagBtn">备注信息</el-button>
            <el-button
              type="primary"
              round
              @click="torRollBackMes()"
              :disabled="casebackList.length == 0"
            >回退查询</el-button>
            <el-button type="primary" round @click="saveForm()" :disabled="flagBtn">保 存</el-button>
            <el-button type="primary" round @click="goBank">返 回</el-button>
          </div>
        </div>
      </el-form>
    </div>
    <div class="right">
      <img src="../../assets/images/filing/downArrow.png" alt class="downArrow" />
      <img src="../../assets/images/filing/TOP.png" alt @click="jump('top')" class="top" />
      <img src="../../assets/images/filing/upArrow.png" alt @click="jump('top')" class="upArrow" />
      <p
        v-for="(item,index) in btnArr"
        :key="index"
        class="btn_text"
        @click="jump(index)"
        :style="{color: activeStep === index ? '#F1CF60' : '#333'}"
      >{{item}}</p>
    </div>
    <!-- 医疗单证录入 -->
    <el-dialog
      class="diamh"
      :visible.sync="isShowhospital"
      :close-on-click-modal="false"
      width="100%"
      :show-close="false"
      :fullscreen="true"
    >
      <el-tabs class="mels" v-model="activeNames">
        <el-tab-pane label="普通医疗单证" name="first">
          <el-dialog title :visible.sync="dialogVisible" append-to-body class="isshow" width="85%">
            <template>
              <p class="twoTitle">
                费用明细
                <el-button
                  style="float:right; padding: 10px 14px;"
                  class="titleBtn"
                  type="primary"
                  @click="addRowItemz1()"
                >新增</el-button>
              </p>
            </template>
            <el-table
              :data="fyDetail.slice((currentPagez3-1)*pagesizez3,currentPagez3*pagesizez3)"
              center="true"
            >
              <el-table-column label="序号" type="index" width="50" :index="indexMethodz3"></el-table-column>
              <el-table-column prop="feeitemname" label="费用项名称" width="160" align="center">
                <template slot="header">
                  <!-- <span class="redStars">&nbsp*&nbsp</span> -->
                  <span>费用项名称</span>
                </template>
                <template slot-scope="scope">
                  <!-- @change="changeFeeItem(scope.row)" -->
                  <el-select
                    placeholder="请选择"
                    v-model="scope.row.feeitemname"
                    filterable
                    clearable
                    @change="changeFYname(scope.row)"
                  >
                    <el-option
                      v-for="(item,index) in fyxLists"
                      :label="item.codename"
                      :value="item.code"
                      :key="index"
                    ></el-option>
                  </el-select>
                </template>
              </el-table-column>
              <el-table-column label="费用名称明细" width="240" align="center">
                <template slot="header">
                  <!-- <span class="redStars">&nbsp*&nbsp</span> -->
                  <span>费用名称明细</span>
                </template>
                <template slot-scope="scope">
                  <el-select
                    placeholder="请选择"
                    v-model="scope.row.feeitemdetil"
                    @focus="getfydata(scope.row,scope.$index)"
                    @change="getfeiyongnum"
                    v-el-select-loadmore="loadmorezz"
                    :filter-method="filteredFY"
                    filterable
                    allow-create
                    clearable
                  >
                    <el-option
                      v-for="(item,index) in newfyDetailList1[scope.$index]"
                      :key="index"
                      :label="item.itemname"
                      :value="(item.id+'|@|'+item.itemname) || item.itemname"
                    ></el-option>
                  </el-select>
                </template>
              </el-table-column>
              <el-table-column prop="fee" label="单价" width="130" align="center">
                <template slot-scope="scope">
                  <el-input
                    v-model="scope.row.fee"
                    type="text"
                    @blur="getSum(scope.row)"
                    clearable
                    maxlength="13"
                    min="0"
                  ></el-input>
                </template>
              </el-table-column>
              <el-table-column prop="number" label="数量" width="100" align="center">
                <template slot-scope="scope">
                  <el-input
                    v-model="scope.row.number"
                    type="text"
                    @blur="getSum(scope.row)"
                    clearable
                    maxlength="13"
                    min="0"
                  ></el-input>
                </template>
              </el-table-column>
              <el-table-column prop="price" label="费用金额" width="130" align="center">
                <template slot="header">
                  <span class="redStars">&nbsp;*&nbsp;</span>
                  <span>费用金额</span>
                </template>
                <template slot-scope="scope">
                  <el-input
                    v-model="scope.row.price"
                    type="text"
                    clearable
                    @blur="twoNum(scope.row)"
                    maxlength="13"
                    min="0"
                  ></el-input>
                </template>
              </el-table-column>
              <el-table-column prop="specifications" label="规格与单位" width="160" align="center">
                <template slot-scope="scope">
                  <el-input v-model="scope.row.specifications" maxlength="100" clearable></el-input>
                </template>
              </el-table-column>
              <el-table-column prop="healthcaretype" label="医保类别" width="160" align="center">
                <template slot-scope="scope">
                  <el-input v-model="scope.row.healthcaretype" clearable maxlength="100"></el-input>
                </template>
              </el-table-column>
              <el-table-column label="操作" width="80" align="center">
                <template slot-scope="scope">
                  <!-- <span class="delete" @click.native.prevent="deleteRow(scope.$index, gridData)"></span> -->

                  <el-button size="mini" @click="deletez3(scope.$index)">删除</el-button>
                  <!-- <el-button size="mini" @click="dialogVisible = true">录入明细</el-button> -->
                </template>
              </el-table-column>
            </el-table>
            <div style="margin-top:10px;">
              <el-pagination
                background
                @size-change="handleSizeChangez3"
                @current-change="handleCurrentChangez3"
                :page-size="pagesizez3"
                layout="prev, pager, next, jumper"
                :total="fyDetail.length"
              ></el-pagination>
            </div>
            <template>
              <p class="twoTitle">
                扣费明细
                <el-button
                  style="float:right;padding: 10px 14px;"
                  class="titleBtn"
                  type="primary"
                  @click="addRowItemz2()"
                >新增</el-button>
              </p>
            </template>
            <el-table
              :data="kfDetail.slice((currentPagez4-1)*pagesizez4,currentPagez4*pagesizez4)"
              center="true"
            >
              <el-table-column label="序号" type="index" width="50" :index="indexMethodz4"></el-table-column>
              <el-table-column label="扣费类型" align="center" width="160">
                <template slot="header">
                  <span class="redStars">&nbsp;*&nbsp;</span>
                  <span>扣费类型</span>
                </template>
                <template slot-scope="scope">
                  <el-select
                    placeholder="请选择"
                    v-model="scope.row.deducttypes"
                    @change="changeKFItem(scope.row)"
                  >
                    <el-option
                      v-for="(item,index) in koufeiTypes"
                      :label="item.codename"
                      :value="item.code"
                      :key="index"
                      filterable
                      clearable
                    ></el-option>
                  </el-select>
                </template>
              </el-table-column>
              <el-table-column prop="deductnames" label="扣费名称" align="center" width="240" clearable>
                <template slot="header">
                  <span class="redStars">&nbsp;*&nbsp;</span>
                  <span>扣费名称</span>
                </template>
                <template slot-scope="scope">
                  <el-select
                    placeholder="请选择"
                    v-model="scope.row.deductnames"
                    @focus="getkfdata(scope.row,scope.$index)"
                    @change="getkoufeinum"
                    v-el-select-loadmore="loadmorezz1"
                    :filter-method="filteredKF"
                    filterable
                    allow-create
                    clearable
                  >
                    <el-option
                      v-for="(item,index) in newkoufeiLists[scope.$index]"
                      :key="index"
                      :label="item.itemname"
                      :value="item.id+'|@|'+item.itemname"
                    ></el-option>
                  </el-select>
                </template>
              </el-table-column>
              <el-table-column prop="deductfee " label="扣费金额" align="center" width="130">
                <template slot="header">
                  <span class="redStars">&nbsp;*&nbsp;</span>
                  <span>扣费金额</span>
                </template>
                <template slot-scope="scope">
                  <el-input
                    v-model="scope.row.deductfee"
                    type="text"
                    @blur="twoNum(scope.row)"
                    maxlength="13"
                    clearable
                    min="0"
                  ></el-input>
                </template>
              </el-table-column>
              <el-table-column prop="deductreasontypes" label="扣费原因类型" width="200">
                <template slot="header">
                  <span class="redStars">&nbsp;*&nbsp;</span>
                  <span>扣费原因类型</span>
                </template>
                <template slot-scope="scope">
                  <!-- <el-input v-model="scope.row.deductreasontypes" clearable></el-input> -->

                  <el-select placeholder="请选择" v-model="scope.row.deductreasontypes">
                    <el-option
                      v-for="(item,index) in koufeiReason"
                      :key="index"
                      :label="item.codename"
                      :value="item.code"
                      filterable
                      clearable
                    ></el-option>
                  </el-select>
                </template>
              </el-table-column>
              <el-table-column prop="deductreasons" label="扣费原因" align="center" width="160">
                <template slot-scope="scope">
                  <el-input v-model="scope.row.deductreasons" clearable maxlength="100"></el-input>
                </template>
              </el-table-column>
              <el-table-column prop="deductemark" label="备注" align="center" width="160">
                <template slot-scope="scope">
                  <el-input v-model="scope.row.deductemark" maxlength="80" clearable></el-input>
                </template>
              </el-table-column>
              <el-table-column label="操作" width="80" align="center">
                <template slot-scope="scope">
                  <el-button size="mini" @click="deletez4(scope.$index)">删除</el-button>
                </template>
              </el-table-column>
            </el-table>
            <div style="margin-top:10px;">
              <el-pagination
                background
                @size-change="handleSizeChangez4"
                @current-change="handleCurrentChangez4"
                :page-size="pagesizez4"
                layout="prev, pager, next, jumper"
                :total="kfDetail.length"
              ></el-pagination>
            </div>
            <span slot="footer" class="dialog-footer">
              <el-button type="primary" @click="beSure">确定</el-button>
              <el-button type="primary" @click="dialogVisible = false">返回</el-button>
            </span>
          </el-dialog>
          <div class="generalMedical" style="padding:10px;">
            <!-- 门诊 -->
            <div class="work_queue">
              <!-- <img src="../../assets/images/report/tab_btn@1x.png" alt=""> -->
              <span>普通门诊单证录入信息</span>
              <div class="box"></div>
            </div>
            <div class="work_table">
              <el-table
                ref="ruleForm"
                style="width: 100%"
                :data="commonOutpatient.slice((currentPagez1-1)*pagesizez1,currentPagez1*pagesizez1)"
                :header-cell-style="{color:'#555',textAlign:'center'}"
                :cell-style="{textAlign:'center'}"
                @sort-change="changeSort"
              >
                <el-table-column label="序号" type="index" width="60" :index="indexMethodz1"></el-table-column>
                <el-table-column prop="mainfeeno" label="收据编号" width="150">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>收据编号</span>
                  </template>
                  <template slot-scope="scope">
                    <el-input
                      v-model="scope.row.mainfeeno"
                      @blur="inputMainfeeno(scope.row)"
                      maxlength="100"
                    ></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="hospitalcode" label="医院名称" width="330">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>医院名称</span>
                  </template>
                  <template slot-scope="scope">
                    <el-select
                      v-model="scope.row.hospitalcode"
                      placeholder="请选择"
                      v-el-select-loadmore="loadmorez11"
                      filterable
                      clearable
                      :filter-method="filteredz"
                      @focus="getRow(scope.row,scope.$index)"
                    >
                      <el-option
                        v-for="item in newhospitalListsz[scope.$index]"
                        :key="item.hospitcode"
                        :label="item.hospitalname"
                        :value="item.hospitcode"
                      ></el-option>
                    </el-select>
                  </template>
                </el-table-column>
                <el-table-column prop="feedate" label="就诊时间" width="160" sortable="custom">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>就诊时间</span>
                  </template>
                  <template slot-scope="scope">
                    <el-date-picker
                      v-model="scope.row.feedate"
                      type="date"
                      placeholder="选择日期"
                      value-format="yyyy-MM-dd"
                      @blur="changeFeeDate(scope.row)"
                    ></el-date-picker>
                  </template>
                </el-table-column>
                <el-table-column prop="billmoney" label="费用总金额" width="140">
                  <template slot-scope="scope">
                    <div
                      v-if="scope.row.billmoney"
                      class="riskcodePDF"
                      @click="getDetailz1(scope.row,scope.$index)"
                    >{{ scope.row.billmoney}}</div>
                    <div v-else class="riskcodePDF" @click="getDetailz1(scope.row,scope.$index)">0</div>
                    <!-- <el-button v-else size="mini" @click="getDetail1(scope.row)">录入明细</el-button> -->
                  </template>
                </el-table-column>
                <el-table-column prop="socifee" label="统筹/附加金额" width="140">
                  <template slot-scope="scope">
                    <el-input
                      v-model="scope.row.socifee"
                      type="text"
                      @blur="getAll(scope.row)"
                      maxlength="13"
                      min="0"
                    ></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="selfamnt" label="自费金额" width="140">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>自费金额</span>
                  </template>
                  <template slot-scope="scope">
                    <el-input
                      v-model="scope.row.selfamnt"
                      type="text"
                      @blur="getAll(scope.row)"
                      maxlength="13"
                      min="0"
                    ></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="selfamnt" label="特殊自费" width="140">
                  <template slot="header">
                    <span>特殊自费</span>
                    <el-popover
                      placement="top-start"
                      title
                      width="200"
                      trigger="hover"
                      content="彩虹桥系列、长生福特殊自费金额"
                    >
                      <span slot="reference">
                        <img
                          src="../../assets/images/filing/warn.png"
                          alt
                          style="width:16px;height:16px"
                        />
                      </span>
                    </el-popover>
                  </template>
                  <template slot-scope="scope">
                    <el-input
                      v-model="scope.row.specselfamnt"
                      type="text"
                      @blur="getAll(scope.row)"
                      maxlength="13"
                      min="0"
                    ></el-input>
                  </template>
                </el-table-column>              
                <el-table-column prop="sociflag" label="社保标志" width="120">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>社保标志</span>
                  </template>
                  <template slot-scope="scope">
                    <el-select v-model="scope.row.sociflag">
                      <el-option label="有" value="1"></el-option>
                      <el-option label="无" value="0"></el-option>
                    </el-select>
                  </template>
                </el-table-column>
                <el-table-column prop="otherfee" label="其他补偿" width="140">
                  <template slot-scope="scope">
                    <el-input
                      v-model="scope.row.otherfee"
                      type="text"
                      @blur="getAll(scope.row)"
                      maxlength="13"
                      min="0"
                    ></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="refusemoney" label="扣费明细" width="140">
                  <template slot-scope="scope">
                    <p>{{scope.row.refusemoney}}</p>
                  </template>
                </el-table-column>
                <el-table-column prop="indemnity" label="收据计算金额" width="140">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>收据计算金额</span>
                  </template>
                  <template slot-scope="scope">
                    <p>{{scope.row.indemnity}}</p>
                    <!-- <el-input v-model="scope.row.indemnity"  type="number" @blur="twoNum(scope.row)" min="0"></el-input> -->
                  </template>
                </el-table-column>
                <el-table-column prop="operation" label="是否手术" width="120">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>是否手术</span>
                  </template>
                  <template slot-scope="scope">
                    <el-select v-model="scope.row.operation" placeholder="请选择">
                      <el-option label="是" value="1"></el-option>
                      <el-option label="否" value="0"></el-option>
                    </el-select>
                  </template>
                </el-table-column>
                <el-table-column label="操作">
                  <template slot-scope="scope">
                    <el-button size="mini" @click="deletez1(scope.row,scope.$index)">删除</el-button>
                  </template>
                </el-table-column>
              </el-table>
              <div style="margin-top:10px;">
                <el-pagination
                  style="display:inline-block;"
                  background
                  @size-change="handleSizeChangez1"
                  @current-change="handleCurrentChangez1"
                  :page-size="pagesizez1"
                  layout="prev, pager, next, jumper"
                  :total="commonOutpatient.length"
                ></el-pagination>
                <el-button
                  style="float:right;margin-right:30px;"
                  type="primary"
                  round
                  size="mini"
                  @click="addRowz1()"
                >增 加</el-button>
              </div>
              <div style="padding:10px 0;"></div>
            </div>
            <!-- 住院 -->
            <div class="work_queue" style="margin-top:20px;">
              <!-- <img src="../../assets/images/report/tab_btn@1x.png" alt=""> -->
              <span>普通住院单证录入信息</span>
              <div class="box"></div>
            </div>
            <div class="work_table">
              <el-table
                :data="commonHospital.slice((currentPagez2-1)*pagesizez2,currentPagez2*pagesizez2)"
                style="width: 100%"
                :header-cell-style="{color:'#555',textAlign:'center'}"
                :cell-style="{textAlign:'center'}"
              >
                <el-table-column label="序号" type="index" width="60" :index="indexMethodz2"></el-table-column>
                <el-table-column prop="mainfeeno" label="收据编号" width="150">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>收据编号</span>
                  </template>
                  <template slot-scope="scope">
                    <el-input
                      v-model="scope.row.mainfeeno"
                      @blur="inputMainfeeno1(scope.row)"
                      maxlength="100"
                    ></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="hospitalcode" label="医院名称" width="330">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>医院名称</span>
                  </template>
                  <template slot-scope="scope">
                    <el-select
                      v-model="scope.row.hospitalcode"
                      placeholder="请选择"
                      v-el-select-loadmore="loadmoresz1"
                      filterable
                      clearable
                      :filter-method="filteredz1"
                      @focus="getRow1(scope.row,scope.$index)"
                    >
                      <el-option
                        v-for="item in newhospitalListsz1[scope.$index]"
                        :key="item.hospitcode"
                        :label="item.hospitalname"
                        :value="item.hospitcode"
                      ></el-option>
                    </el-select>
                  </template>
                </el-table-column>
                <el-table-column prop="hospstartdate" label="入院日期" width="160">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>入院日期</span>
                  </template>
                  <template slot-scope="scope">
                    <el-date-picker
                      v-model="scope.row.hospstartdate"
                      type="date"
                      placeholder="选择日期"
                      value-format="yyyy-MM-dd"
                      @blur="changeHospstartdate(scope.row)"
                    ></el-date-picker>
                  </template>
                </el-table-column>
                <el-table-column prop="hospenddate" label="出院日期" width="160">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>出院日期</span>
                  </template>
                  <template slot-scope="scope">
                    <el-date-picker
                      v-model="scope.row.hospenddate"
                      type="date"
                      placeholder="选择日期"
                      value-format="yyyy-MM-dd"
                      @blur="changeHospenddate(scope.row,scope.$index)"
                    ></el-date-picker>
                  </template>
                </el-table-column>
                <el-table-column prop="realhospdate" label="普通病房天数" width="120">
                  <template slot-scope="scope">
                    <el-input
                      v-model="scope.row.realhospdate"
                      @blur="checkUnumber1(scope.row,scope.$index)"
                      min="0"
                    ></el-input>
                    <!-- <el-input-number
                  v-model="scope.row.realhospdate"
                  @blur="checkUnumber1(scope.row,scope.$index)"
                  controls-position="right"
                  size="medium"
                  :step="0.5"          
                    ></el-input-number>-->
                  </template>
                </el-table-column>
                <el-table-column prop="imhospdate" label="重症病房天数" width="120">
                  <template slot-scope="scope">
                    <!-- <el-input-number
                  v-model="scope.row.imhospdate"
                  @blur="checkUnumber2(scope.row)"
                  controls-position="right"
                  size="medium"
                  :step="0.5"
                  :min="0"
                    ></el-input-number>-->
                    <el-input
                      v-model="scope.row.imhospdate"
                      @blur="checkUnumber2(scope.row)"
                      min="0"
                    ></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="billmoney" label="费用总金额" width="140">
                  <template slot-scope="scope">
                    <div
                      v-if="scope.row.billmoney"
                      class="riskcodePDF"
                      @click="getDetailz2(scope.row,scope.$index)"
                    >{{ scope.row.billmoney}}</div>
                    <div v-else class="riskcodePDF" @click="getDetailz2(scope.row,scope.$index)">0</div>

                    <!-- <el-button v-else size="mini" @click="getDetailz2(scope.row,scope.$index)">录入明细</el-button> -->
                  </template>
                </el-table-column>
                <el-table-column prop="selfamnt" label="自费金额" width="140">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>自费金额</span>
                  </template>
                  <template slot-scope="scope">
                    <!-- <p>{{scope.row.selfamnt}}</p> -->
                    <el-input
                      v-model="scope.row.selfamnt"
                      type="text"
                      @blur="getAll(scope.row)"
                      maxlength="13"
                      min="0"
                    ></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="selfamnt" label="特殊自费" width="140">
                  <template slot="header">
                    <span>特殊自费</span>
                    <el-popover
                      placement="top-start"
                      title
                      width="200"
                      trigger="hover"
                      content="彩虹桥系列、长生福特殊自费金额"
                    >
                      <span slot="reference">
                        <img
                          src="../../assets/images/filing/warn.png"
                          alt
                          style="width:16px;height:16px"
                        />
                      </span>
                    </el-popover>
                  </template>
                  <template slot-scope="scope">
                    <el-input
                      v-model="scope.row.specselfamnt"
                      type="text"
                      @blur="getAll(scope.row)"
                      maxlength="13"
                      min="0"
                    ></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="socifee" label="统筹/附加金额" width="140">
                  <template slot-scope="scope">
                    <el-input
                      v-model="scope.row.socifee"
                      type="text"
                      @blur="getAll(scope.row)"
                      maxlength="13"
                      min="0"
                    ></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="sociflag" label="社保标志" width="120">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>社保标志</span>
                  </template>
                  <template slot-scope="scope">
                    <el-select v-model="scope.row.sociflag" placeholder="请选择">
                      <el-option label="有" value="1"></el-option>
                      <el-option label="无" value="0"></el-option>
                    </el-select>
                  </template>
                </el-table-column>
                <el-table-column prop="otherfee" label="其他补偿" width="140">
                  <template slot-scope="scope">
                    <el-input
                      v-model="scope.row.otherfee"
                      type="text"
                      @blur="getAll(scope.row)"
                      maxlength="13"
                      min="0"
                    ></el-input>
                  </template>
                </el-table-column>
                <el-table-column prop="refusemoney" label="扣费明细" width="140">
                  <template slot-scope="scope">
                    <p>{{scope.row.refusemoney}}</p>
                  </template>
                </el-table-column>
                <el-table-column prop="indemnity" label="收据赔付金额" width="140">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>收据赔付金额</span>
                  </template>
                  <template slot-scope="scope">
                    <p>{{scope.row.indemnity}}</p>
                    <!-- <el-input v-model="scope.row.indemnity"  type="number" @blur="twoNum(scope.row)" min="0"></el-input> -->
                  </template>
                </el-table-column>
                <el-table-column prop="operation" label="是否手术" width="120">
                  <template slot="header">
                    <span class="redStars">&nbsp;*&nbsp;</span>
                    <span>是否手术</span>
                  </template>
                  <template slot-scope="scope">
                    <el-select v-model="scope.row.operation" placeholder="请选择活动区域">
                      <el-option label="是" value="1"></el-option>
                      <el-option label="否" value="0"></el-option>
                    </el-select>
                  </template>
                </el-table-column>
                <el-table-column label="操作">
                  <template slot-scope="scope">
                    <el-button size="mini" @click="deletez2(scope.row,scope.$index)">删除</el-button>
                  </template>
                </el-table-column>
              </el-table>
              <div style="margin-top:10px;">
                <el-pagination
                  style="display:inline-block;"
                  background
                  @size-change="handleSizeChangez2"
                  @current-change="handleCurrentChangez2"
                  :page-size="pagesizez2"
                  layout="prev, pager, next, jumper"
                  :total="commonHospital.length"
                ></el-pagination>
                <el-button
                  style="float: right;margin-right:30px;"
                  type="primary"
                  round
                  size="mini"
                  @click="addRowz2()"
                >增 加</el-button>
              </div>
            </div>
            <div style="text-align:right;margin:50px 28px 0 0;">
              <el-button type="primary" round @click="applyTask">保 存</el-button>
              <el-button type="primary" round @click="toAddFiling">返 回</el-button>
            </div>
          </div>
        </el-tab-pane>
        <el-tab-pane label="北京医疗单证" name="second">
          <beijing-dialog
            :bjObjForm.sync="bjObjForm"
            :isShowhospital.sync="isShowhospital"
            :key="timer"
          />
        </el-tab-pane>
      </el-tabs>
      <!-- <el-dialog width="80%" title="内层 Dialog" :visible.sync="dialogVisible" append-to-body></el-dialog> -->
    </el-dialog>
    <!-- 备注 -->
    <el-dialog :visible.sync="remarkFormVisible" width="74%" custom-class="dialogRemarks">
      <div class="lable">
        <el-row>
          <el-col :span="15" class="leftItem">
            <el-table
              :data="remarkTableData.slice((currpageRemark - 1) * pagesizeRemark, currpageRemark * pagesizeRemark)"
              border
              :default-sort="{prop: 'maketime', order: 'descending'}"
              :header-cell-style="{background:'#F7FAFF',color:'#333333'}"
            >
              <el-table-column type="index" label="序号" width="80" align="center"></el-table-column>
              <el-table-column
                show-overflow-tooltip
                class="remarkContent"
                prop="describecontes"
                label="备注内容"
                align="center"
              ></el-table-column>
              <el-table-column prop="operator" label="操作员" align="center"></el-table-column>
              <el-table-column prop="maketimes" label="备注时间" align="center"></el-table-column>
            </el-table>
            <div style="margin-top:10px;">
              <el-pagination
                background
                small
                @size-change="handleSizeChangeRemark"
                @current-change="handleCurrentChangeRemark"
                :page-size="pagesizeRemark"
                layout="prev, pager, next,jumper"
                :total="remarkTableData.length"
              ></el-pagination>
            </div>
            <el-button class="poBtn" icon="el-icon-d-arrow-left" @click="toShowRightDialog"></el-button>
          </el-col>

          <el-col :span="8" class="rightItem" v-show="toShow">
            <div>
              <div class="innerLable1">
                <div class="contentss">
                  <div class="note" style="text-align:left">
                    <span style="font-size:18px;margin-left:10px;margin-top:15px;color:#409eff">备注内容</span>
                    <img
                      src="../../assets/images/eapproval/downForNote.png"
                      style="float:right;margin-top:10px;margin-right:15px;"
                    />
                  </div>
                  <div class="blackLine"></div>
                  <el-input
                    class="texContent"
                    type="textarea"
                    v-model="remarkDesc"
                    rows="8"
                    maxlength="700"
                    resize="none"
                    show-word-limit
                    placeholder="请输入备注信息"
                  ></el-input>
                </div>
              </div>
              <div slot="footer" style="margin:10px 0;text-align: center;">
                <el-button
                  style="background-color:#0673FF;"
                  round
                  type="primary"
                  @click="addRemarks"
                >添加</el-button>
                <el-button
                  style="background-color:#0673FF;"
                  round
                  type="primary"
                  @click="gobacks"
                >返回</el-button>
              </div>
            </div>
          </el-col>
        </el-row>
      </div>
    </el-dialog>
    <Drag v-if="rgtobj != null" ref="dragno" :rgtobj="rgtobj"></Drag>
  </div>
</template>
<script>
import axios from "axios";
import BeijingDialog from "@/components/BeijingDialog";
import Drag from "../../components/dragCard";
import { service, post } from "../../utils/request";
import { IDType } from "../../utils/service";
import { ISYMD } from "../../utils/common";
import { lstat } from "fs";
import {
  checkdeff,
  checkLfor3,
  checkMfor,
  sumDays,
  checkLfor1,
  checkLfor2,
  accMul,
  numTwo,
  getCodeType
} from "../../utils/service.js";
import { generateUUID, getDate, getTime } from "../../utils/common.js";
export default {
  name: "AddFiling",
  components: {
    Drag,
    BeijingDialog
  },
  directives: {
    "el-select-loadmore": {
      bind(el, binding) {
        const elss = el.querySelector(
          ".el-select-dropdown .el-select-dropdown__wrap"
        );
        elss.addEventListener("scroll", function() {
          const condition =
            this.scrollHeight - this.scrollTop - 1 <= this.clientHeight;
          if (condition) {
            binding.value();
          }
        });
      }
    }
  },
  filters: {
    codeToname: function(obj, arr) {
      var a = null;
      arr.forEach(element => {
        if (element.code === obj) {
          a = element.name;
        }
      });
      return a;
    }
  },
  data() {
    var isMobileNumber = (rule, value, callback) => {
      if (!value) {
        return new Error("电话不能为空！");
      } else {
        var reg = /^\d+$|^\d+[.]?\d+$/;
        if (!reg.test(value)) {
          callback(new Error("电话号码不合法!"));
        } else {
          if (value.substr(0, 1) == 1) {
            if (value.length != 11) {
              callback(new Error("电话号码不合法!"));
            } else {
              callback();
            }
          } else {
            callback();
          }
        }
      }
    };
    var isMobileNumber1 = (rule, value, callback) => {
      if (!value) {
        return new Error("电话不能为空！");
      } else {
        var reg = /^\d+$|^\d+[.]?\d+$/;
        if (!reg.test(value)) {
          callback(new Error("移动电话不合法!"));
        } else {
          if (value.length != 11) {
            callback(new Error("移动电话不合法!"));
          } else {
            if (value.substr(0, 1) != 1) {
              callback(new Error("移动电话不合法!"));
            } else {
              callback();
            }
          }
        }
      }
    };

    var isCheckID = (rule, value, callback) => {
      if (!value) {
        return new Error("身份证号码不能为空！");
      } else {
        const reg1 = /^[0-9a-zA-Z]*$/g;
        if (!reg1.test(value)) {
          callback(new Error("请输入合法的证件号码"));
        } else {
          if (value.length != 15 && value.length != 18) {
            callback(new Error("身份证只能为15位或18位"));
          } else {
            const reg = /(^[1-9]\d{5}(18|19|([23]\d))\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}$)/;
            if (!reg.test(value)) {
              callback(new Error("请输入合法的的身份证号码"));
            } else {
              callback();
            }
          }
        }
      }
    };
    var isCheckPass = (rule, value, callback) => {
      if (!value) {
        return new Error("护照号码不能为空！");
      } else {
        let reg = /^[0-9a-zA-Z]*$/g;
        if (!reg.test(value)) {
          callback(new Error("请输入合法的证件号码"));
        } else {
          if (value.length < 6) {
            callback(new Error("护照的长度必须大于等于6"));
          } else {
            callback();
          }
        }
      }
    };
    var isCheckOther = (rule, value, callback) => {
      if (!value) {
        return new Error("证件号码不能为空！");
      } else {
        const reg = /^[0-9a-zA-Z]*$/g;
        if (!reg.test(value)) {
          callback(new Error("请输入合法的证件号码"));
        } else {
          callback();
        }
      }
    };
    var isMoney = (rule, value, callback) => {
      if (!value) {
        return new Error("年收入不能为空！");
      } else {
        var reg = /^\d+$|^\d*\.\d+$/g;
        if (!reg.test(value)) {
          callback(new Error("只能填写数字！"));
        } else {
          if (value.substr(0, 1) === "." || value.substr(-1, 1) === ".") {
            callback(new Error("只能填写数字！"));
          } else {
            var amtreg = /^(\d+)(.\d{0,2})?$/;
            if (!amtreg.test(value)) {
              callback(new Error("最多支持两位小数！"));
            } else {
              callback();
            }
          }
        }
      }
    };
    var workunit = (rule, value, callback) => {
      if (!value && !this.objForm.workaddress) {
        callback(new Error("请输入单位名称"));
      } else {
        callback();
      }
    };
    var workaddress = (rule, value, callback) => {
      if (!value && !this.objForm.workunit) {
        callback(new Error("请输入单位地址"));
      } else {
        callback();
      }
    };
    // var isapplydate = (rule, value, callback) => {
    //   if (value) {
    //     let time3 =
    //       new Date(localStorage.getItem("isDate")).getTime() ||
    //       new Date().getTime();
    //     let applydate = new Date(this.objForm.applydate).getTime();
    //     if (time3 < applydate) {
    //       callback(new Error("申请日期不能大于当前日期"));
    //     }
    //   } else {
    //     callback();
    //   }
    // };
    return {
      linglist: [
        {
          id: "8",
          name: "投保人"
        },
        {
          id: "32",
          name: "被保人"
        }
      ],
      activeNames: "first",
      bJdialogVisible: false,
      objForm: {},
      rgtobj: null, // 微信浮动框所需参数
      centerDialogVisible: true,
      aaaa: true,
      zds: localStorage.getItem("ZB"),
      outerVisible: false,
      innerVisible: false,

      dialogVisible: false,
      isShowhospital: false,
      getRowKeys(row) {
        // alert(row.contno)
        return row.contno;
      },
      isAutofocus: false,
      remarkContents: "",
      toShowss: false, // 就诊医院备注
      abc: false,
      confirm: true,
      btn: false,
      isSaveForm: 1,
      bankAccountNumBlur: 1,
      bankFirst: "",
      pagesize: 10,
      currpage: 1,
      currentPage: 1,
      currentPage1: 1,
      currentPage2: 1,
      currentPage3: 1,
      total: 0,
      total1: 0,
      total2: 0,
      total3: 0,
      genObj: {},
      flagBtn: false,
      unCheck: false,
      unValue: false,
      unValueNo: false,
      unFlag: false,
      saveFlag: false,
      isSaveFlag: true,
      isSave: false,
      isEmpty: false,
      bigObj: {},
      bigObj2: {},
      casebackList: "",
      remarkDesc: "",
      pagesizeRemark: 5, // 备注分页
      currpageRemark: 1,
      remarkTableData: [], // 备注表格
      toShow: true,
      remarkFormVisible: false, // 备注弹框显示与否
      flag1: false,
      flag2: false,
      obj: {},
      axiosList: [],
      Oaccprovince: "",
      Oacccity: "",
      Oacccounty: "",
      Oaccaddress: "",
      rgtclass: "柜面渠道",
      objForm: {
        operator: localStorage.getItem("userCode"),
        mngcom: localStorage.getItem("comCode"),
        customerno: this.$route.query.customerno,
        // accno: null,
        rgtno: "",
        agentcode: sessionStorage.getItem("agentcode"),
        remark: "",
        idenddate: "",
        reasoncode: [],
        occname: "",
        occidtype: "",
        occidno: "",
        occidno1: "",
        sex: "",
        age: "",
        applydate: new Date(),
        accidenttype: "",
        notice: "1",
        contno: "",
        agentphone: "",
        directpay: "0",
        accidentdate: "",
        accidentreason: "",
        accdegree: "",
        accidentcourse: "",
        accidentsite: [],
        accsite: "",
        accprovince: null,
        acccity: null,
        acccounty: null,
        accaddress: null,
        hospitalname: "",
        hospitallesion: "",
        hospitalbed: "",
        // inhospitaldate: "",
        // outhospitaldate: "",
        dianosedate: "",
        // dieasetype: "",
        // dianobasis: [],
        deathdate: "",
        pointbnf: "",
        exempt: "",
        disableddrpt: "",
        occuprpt: "",
        rgtantname: "",
        relation: "",
        rgtantidtype: "",
        rgtantidno: "",
        rgtantprovince: "",
        rgtantcity: "",
        rgtantcounty: "",
        rgtantaddress: "",
        postcode: "",
        rgtantmobile: "",
        recename: "",
        receidno: "",
        receidtype: "",
        relationtocont: "",
        bankaccno: "",
        headbankname: "",
        bankname: "",
        province: "",
        city: "",
        address: "",
        profession: "",
        annualincome: "",
        contactway: "",
        workunit: "",
        workaddress: "",
        receiveaccprovinc: "",
        receivecity: "",
        receivedistrict: "",
        receiveaddress: "",
        rgtconclusion: "",
        norgtreason: "",
        reasondetail: ""
      },
      ObjForm: {
        reasoncode: []
      },
      NewObj: {
        reasoncode: []
      },
      bjObjForm: {},
      reasoncode: [],
      rgtno: "",
      expands: [],
      rgtNo: "",
      accNo: "",
      array: [],
      province: "",
      city: "",
      address: "",
      bankname: "",
      cityArr: [],
      addressArr: [],
      bankArr: [],
      timer: "",
      tableMessage1: {},
      tableMessage2: {},
      tableMessage3: {},
      tableMessage4: {},
      tableMessage5: {},
      tableMessage6: {},
      activeStep: 0,
      btnArr: [
        "出险人信息",
        "保单信息查询",
        "既往赔案查询",
        "保全记录",
        "立案申请信息",
        "出险信息",
        "申请人信息",
        "领款人信息",
        "立案结论信息"
      ],
      centerDialogVisible: false,
      dialogTableVisible: false,
      conclusionForm: {}, //立案结论信息
      caseLossListArr: [], // 既往赔案
      baoquanArr: [], // 保全记录
      sexList: [], //性别枚举值
      cardTypeList: [], // 证件类型
      accidenttypeList: [], // 出险类型
      accReasonList: [], // 事故原因
      shoushangList: [], //受伤程度
      // chuxianResult: [], //出险结果
      llclaimtypeList: [], // 理赔类型
      provinceList: [], // 省
      cityList: [], // 市
      areaList: [], // 区
      provinceList1: [], // 省
      cityList1: [], // 市
      areaList1: [], // 区
      provinceList2: [], // 省
      provinceList3: [], // 省
      cityList2: [], // 市
      areaList2: [], // 区
      cityList3: [], // 市
      areaList3: [], // 区
      hospitalLists: [], // 医院
      hospitalListss: [], // 医院备注
      workList: [], // 职业
      policyArr1: [],
      policyArr2: [],
      policyArr3: [],
      policydetail: [],
      tBankList: [], //银行总行
      bankAddressList: [], //银行地区
      branchBankList: [], //银行分行

      accidentReason: [
        {
          value: "1",
          text: "交通事故"
        },
        {
          value: "2",
          text: "单车交通事故"
        },
        {
          value: "3",
          text: "意外受伤"
        },
        {
          value: "4",
          text: "高坠"
        },
        {
          value: "5",
          text: "溺水"
        },
        {
          value: "6",
          text: "其他"
        }
      ],
      placeOptions: [
        {
          value: "1",
          label: "室内",
          children: [
            {
              value: "01",
              label: "厂房内"
            },
            {
              value: "02",
              label: "室内职场"
            },
            {
              value: "03",
              label: "住宅内"
            },
            {
              value: "04",
              label: "公共室内"
            },
            {
              value: "15",
              label: "电梯"
            }
          ]
        },
        {
          value: "2",
          label: "室外",
          children: [
            {
              value: "05",
              label: "工地"
            },
            {
              value: "06",
              label: "农田"
            },
            {
              value: "07",
              label: "山岭"
            },
            {
              value: "08",
              label: "公共室外"
            }
          ]
        },
        {
          value: "3",
          label: "道路上"
        },
        {
          value: "4",
          label: "交通工具",
          children: [
            {
              value: "09",
              label: "运营车辆内"
            },
            {
              value: "10",
              label: "私家车辆内"
            },
            {
              value: "11",
              label: "火车"
            },
            {
              value: "12",
              label: "飞机"
            },
            {
              value: "13",
              label: "轮船"
            },
            {
              value: "14",
              label: "非机动车"
            }
          ]
        },
        {
          value: "5",
          label: "其他"
        }
      ],
      dianoBasis: [
        {
          value: "1",
          text: "病理报告"
        },
        {
          value: "2",
          text: "生化检查"
        },
        {
          value: "3",
          text: "心电图检查"
        },
        {
          value: "4",
          text: "放射线检查"
        },
        {
          value: "5",
          text: "内窥镜检查"
        },
        {
          value: "6",
          text: "其他检查"
        }
      ],
      resource: [
        {
          value: "1",
          text: "恶性肿瘤"
        },
        {
          value: "2",
          text: "非恶性肿瘤"
        }
      ],
      resource1: [
        {
          value: "3",
          text: "交通事故"
        },
        {
          value: "4",
          text: "非交通事故"
        }
      ],
      resource2: [],
      relations: [],
      form: {
        name: "",
        region: "",
        date1: "",
        date2: "",
        delivery: false,
        type: [],
        resource: "",
        desc: ""
      },
      pictureRemark: require("../../assets/images/filing/warn.png"),
      activeName: ["1", "2", "3", "4", "5", "6"],
      labelPosition: "right",
      isbox: true,
      style1: {
        margin: "0 0 0 15px"
      },
      active: "first",
      pageData: {
        startPage: 0,
        endPage: 100
      },
      rules: {
        accprovince: [
          {
            required: true,
            message: "省不能为空！",
            trigger: "change"
          }
        ],
        acccity: [
          {
            required: true,
            message: "市不能为空！",
            trigger: "change"
          }
        ],
        acccounty: [
          {
            required: true,
            message: "区不能为空！",
            trigger: "change"
          }
        ],
        accaddress: [
          {
            required: true,
            message: "详细地址不能为空！",
            trigger: "blur"
          }
        ],
        receiveaccprovinc: [
          {
            required: true,
            message: "请选择省",
            trigger: "change"
          }
        ],
        receivecity: [
          {
            required: true,
            message: "请选择市",
            trigger: "change"
          }
        ],
        receivedistrict: [
          {
            required: true,
            message: "请选择区",
            trigger: "change"
          }
        ],
        receiveaddress: [
          {
            required: true,
            message: "请输入详细地址",
            trigger: "blur"
          }
        ],
        document: [
          {
            required: true,
            message: "证件号码不能为空！",
            trigger: ["blur", "change"]
          },
          { validator: isCheckOther, trigger: "blur" } //注
        ],
        passwork: [
          {
            required: true,
            message: "证件号码不能为空！",
            trigger: ["blur", "change"]
          },
          { validator: isCheckPass, trigger: "blur" } //注
        ],
        occname: [
          { required: true, message: "出险人姓名不能为空！", trigger: "blur" }
        ],
        occidtype: [
          {
            required: true,
            message: "出险人证件类型不能为空！",
            trigger: "change"
          }
        ],
        occidno: [
          {
            required: true,
            message: "证件号码不能为空！",
            trigger: "blur"
          }
        ],
        rgtantidno: [
          {
            required: true,
            message: "证件号码不能为空！",
            trigger: ["blur", "change"]
          },
          { validator: isCheckID, trigger: "blur" }
          // {
          //   pattern: /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$|^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/,
          //   message: "请输入正确的身份证件号码"
          // }
        ],
        rgtantidno1: [
          {
            required: true,
            message: "证件号码不能为空！",
            trigger: ["blur", "change"]
          }
          // {
          //   pattern: /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$|^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/,
          //   message: "请输入正确的身份证件号码"
          // }
        ],
        sex: [
          { required: true, message: "出险人性别不能为空！", trigger: "blur" }
        ],
        age: [
          { required: true, message: "出险人年龄不能为空！", trigger: "blur" }
        ],
        idenddate: [
          {
            required: true,
            message: "证件有效期止期不能为空！",
            trigger: "blur"
          }
          // { validator: isDateNow, trigger: "change" }
        ],
        notice: [
          {
            required: true,
            message: "是否通知营销员不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        contno: [
          {
            required: true,
            message: "保单号不能为空！",
            trigger: "blur"
          }
        ],

        applydate: [
          {
            required: true,
            message: "申请日期不能为空！",
            trigger: ["blur"]
          }
          // { validator: isapplydate, trigger: "blur" } //注
        ],
        accidentdate: [
          {
            required: true,
            message: "出险日期不能为空！",
            trigger: ["blur"]
          }
        ],
        reasoncode: [
          {
            type: "array",
            required: true,
            message: "理赔类型不能为空！",
            trigger: "change"
          }
        ],
        accidenttype: [
          {
            required: true,
            message: "出险类型不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        accidentreason: [
          {
            required: true,
            message: "事故原因不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        accdegree: [
          {
            required: true,
            message: "意外事故受伤程度不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        accidentsite: [
          {
            required: true,
            message: "事故发生地点性质不能为空！",
            trigger: "change"
          }
        ],
        hospitalname: [
          {
            required: true,
            message: "就诊医院不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        dianosedate: [
          {
            required: true,
            message: "确诊日期不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        deathdate: [
          {
            required: true,
            message: "身故日期不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        pointbnf: [
          {
            required: true,
            message: "受益人是否指定不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        exempt: [
          {
            required: true,
            message: "申请豁免原因不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        // resource: [
        //   {
        //     required: true,
        //     message: "请选择申请豁免原因",
        //     trigger: ["blur", "change"]
        //   }
        // ],
        disableddrpt: [
          {
            required: true,
            message: "伤残鉴定报告不能为空！",
            trigger: "change"
          }
        ],
        occuprpt: [
          {
            required: true,
            message: "工伤报告不能为空！",
            trigger: "change"
          }
        ],
        rgtantname: [
          {
            required: true,
            message: "申请人姓名不能为空！",
            trigger: ["blur", "change"]
          }
          // { validator: isNameLeg, trigger: "blur" }
        ],
        relation: [
          {
            required: true,
            message: "申请人与出险人关系不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        rgtantidtype: [
          {
            required: true,
            message: "证件类型不能为空！",
            trigger: "change"
          }
        ],
        rgtantmobile: [
          {
            required: true,
            message: "电话不能为空！",
            trigger: ["blur", "change"]
          },
          { validator: isMobileNumber1, trigger: "blur" } //注
        ],
        recename: [
          {
            required: true,
            message: "账户所有人姓名不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        receidtype: [
          {
            required: true,
            message: "证件类型不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        relationtocont: [
          {
            required: false,
            // message: "与被保人关系不能为空！",
            trigger: ["blur", "change"]
          }
          // { validator: workunit, trigger: "blur" } //注
        ],
        receidno: [
          {
            required: true,
            message: "证件号码不能为空！",
            trigger: "blur"
          },
          { validator: isCheckID, trigger: "blur" } //注
        ],
        bankaccno: [
          {
            required: true,
            message: "授权账户号码不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        headbankname: [
          {
            required: true,
            message: "总行不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        province: [
          {
            required: true,
            message: "地区不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        bankname: [
          // {
          //   required: true,
          //   message: "支行不能为空！",
          //   trigger: ["blur", "change"]
          // }
          // {
          //   required: true,
          //   message: "支行不能为空！",
          //   trigger: ["blur", "change"]
          // }
        ],
        profession: [
          {
            required: true,
            message: "职业不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        annualincome: [
          {
            required: true,
            message: "请输入年收入",
            trigger: ["blur", "change"]
          }
          // { validator: isMoney, trigger: "blur" } //注
        ],
        contactway: [
          {
            required: true,
            message: "联系方式不能为空！",
            trigger: ["blur", "change"]
          },
          { validator: isMobileNumber, trigger: "blur" } //注
        ],
        workunit: [
          { validator: workunit, trigger: "blur" } //注
        ],
        workaddress: [
          { validator: workaddress, trigger: "blur" } //注
        ],
        rgtconclusion: [
          {
            required: true,
            message: "立案结论不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        norgtreason: [
          {
            required: true,
            message: "不予立案原因不能为空！",
            trigger: ["blur", "change"]
          }
        ],
        remark: [
          {
            message: "电话号码不能为空！",
            trigger: ["blur", "change"]
          },
          { validator: isMobileNumber, trigger: "blur" } //注
        ],
        reasondetail: [
          { required: true, message: "原因说明不能为空！", trigger: "blur" }
        ],
        agentphone: [
          { required: true, message: "营销员电话不能为空！", trigger: "blur" }
        ]
      },
      riskResultList: [],
      // formData:{
      //   pageIndex:1,
      //   pagesize:100
      // }
      formData: {
        pagestart: 1,
        pageend: 100,
        likename: ""
      },
      formData1: {
        pagestart: 0,
        pageend: 100,
        likename: ""
      },
      bankFormData: {
        pagestart: 0,
        pageend: 100,
        likename: ""
      },
      bankFormAddress: {
        pagestart: 0,
        pageend: 100,
        likename: ""
      },
      // =================================
      hosState: "",
      fypageDataz2: {
        startPage: 0,
        endPage: 100
      },
      kfpageDataz2: {
        startPage: 0,
        endPage: 100
      },
      pageDataz: {
        startPage: 0,
        endPage: 100
      },
      pageDataz1: {
        startPage: 0,
        endPage: 100
      },
      pageDataz2: {
        startPage: 0,
        endPage: 100
      },
      pageDataz3: {
        startPage: 0,
        endPage: 100
      },
      hospitalListsz: [],
      hospitalListsnamez: "",
      newhospitalListsz: [],

      hosState1: "",
      hospitalListsz1: "",
      hospitalListsnamez1: "",
      newhospitalListsz1: [],
      pagesizez1: 10,
      currentPagez1: 1,
      pagesizez2: 10,
      currentPagez2: 1,
      pagesizez3: 10,
      currentPagez3: 1,
      pagesizez4: 10,
      currentPagez4: 1,
      mainData1: [],
      mainData2: [],
      dialogVisible: false,
      medicalList: [],
      getNumList: [],
      fyxLists: [],
      fyDetailList1: [],
      newfyDetailList1: [],
      fyListCode: "",
      kyListCode: "",
      lastTask: "",

      koufeiTypes: [], // 扣费类型
      // 显示代码+名称
      koufeiReason: [], // 扣费原因类型
      commonOutpatient: [], //普通门诊
      commonOutpatients: [], //普通门诊
      kfDetail: [], // 扣费明细
      commonHospital: [], // 普通住院
      commonHospitals: [], // 普通住院
      fyDetail: [], // 费用明细
      inhospital: null, // 入院日期
      hospitalName: null, // 医院名称
      outhospital: null, //出院日期
      death: null, //身故日期
      accent: null, //出险日期
      ordTime: null, //普通病房天数
      koufeiLists: [],
      newkoufeiLists: [],
      realDate: [],
      fyname: "",
      fycode: "",
      fyStatez: "",
      kfname: "",
      kfcode: "",
      kfStatez: ""
    };
  },
  watch: {
    "objForm.accidenttype": function(value) {
      if (value == "02") {
        // debugger;
        if (
          !(
            this.objForm.accprovince ||
            this.objForm.acccity ||
            this.objForm.acccounty ||
            this.objForm.accaddress
          )
        ) {
          // this.objForm.accprovince = this.Oaccprovince;
          // this.objForm.acccity = this.Oacccity;
          // this.objForm.acccounty = this.Oacccounty;
          // this.objForm.accaddress = this.Oaccaddress;
          this.objForm.accprovince = this.objForm.homeprovince;
          this.objForm.acccity = this.objForm.homecity;
          this.objForm.accaddress = this.objForm.homecommunity;
          this.objForm.acccounty = this.objForm.homecounty;
          this.getCityCode();
          this.getcountyCode();
        }
      }
    },
    "objForm.hospitalname": function(newValue, oldValue) {
      if (newValue != oldValue) {
        this.pageData.startPage = 0;
        this.pageData.endPage = 100;
      }
    },
    // "objForm.recename": function(newValue, oldValue) {
    //   if (newValue != null || !"".equals(newValue.trim())) {
    //     this.flag1 = true;
    //     this.flag2 = true;
    //   }
    // },
    // "objForm.receidno": function(newValue, oldValue) {
    //   if (newValue != null || !"".equals(newValue.trim())) {
    //     this.flag1 = true;
    //     this.flag2 = true;
    //   }
    // },
    // "objForm.profession": function(newValue, oldValue) {
    //   if (newValue != null || !"".equals(newValue.trim())) {
    //     this.flag1 = true;
    //     this.flag2 = true;
    //     if (this.objForm.workaddress !== "") {
    //       this.flag1 = true;
    //       this.flag2 = true;
    //     }
    //   }
    // },
    // "objForm.annualincome": function(newValue, oldValue) {
    //   if (newValue != null || !"".equals(newValue.trim())) {
    //     this.flag1 = true;
    //     this.flag2 = true;
    //   }
    // },
    // "objForm.contactway": function(newValue, oldValue) {
    //   if (newValue != null || !"".equals(newValue.trim())) {
    //     this.flag1 = true;
    //     this.flag2 = true;
    //   }
    // },
    // "objForm.receiveaccprovinc": function(newValue, oldValue) {
    //   if (newValue != null || !"".equals(newValue.trim())) {
    //     this.flag1 = true;
    //     this.flag2 = true;
    //   }
    // },
    // "objForm.workaddress": function(value) {
    //   if (value != null || !"".equals(value.trim())) {
    //     this.flag1 = false;
    //   } else {
    //     this.flag1 = false;
    //   }
    // },
    "objForm.relation": function(value) {
      if (value === "00") {
        this.unFlag = true;
      }
      if (this.$route.query.rgtno && this.abc) {
        if (value === "00") {
          this.unFlag = true;
          this.objForm.rgtantname = this.objForm.occname;
          this.objForm.rgtantidtype = this.objForm.occidtype;
          this.objForm.rgtantidno = this.objForm.occidno;
          if (this.objForm.remark) {
            this.objForm.rgtantmobile = this.objForm.remark;
          }
          if (this.objForm.homeprovince) {
            this.objForm.rgtantprovince = this.objForm.homeprovince;
          }
          if (this.objForm.homecity) {
            this.objForm.rgtantcity = this.objForm.homecity;
          }
          if (this.objForm.homecounty) {
            this.objForm.rgtantcounty = this.objForm.homecounty;
          }
          if (this.objForm.homecommunity) {
            this.objForm.rgtantaddress = this.objForm.homecommunity;
          }
          this.getCityCode();
          this.getcountyCode();
          if (this.objForm.homepostcode) {
            this.objForm.postcode = this.objForm.homepostcode;
          }
        } else {
          this.unFlag = false;
        }
      } else {
        if (this.abc) {
          if (value === "00") {
            this.unFlag = true;
            this.objForm.rgtantname = this.objForm.occname;
            this.objForm.rgtantidtype = this.objForm.occidtype;
            this.objForm.rgtantidno = this.objForm.occidno;
            if (this.objForm.remark) {
              this.objForm.rgtantmobile = this.objForm.remark;
            }
            if (this.objForm.homeprovince) {
              this.objForm.rgtantprovince = this.objForm.homeprovince;
            }
            if (this.objForm.homecity) {
              this.objForm.rgtantcity = this.objForm.homecity;
            }
            if (this.objForm.homecounty) {
              this.objForm.rgtantcounty = this.objForm.homecounty;
            }
            if (this.objForm.homecommunity) {
              this.objForm.rgtantaddress = this.objForm.homecommunity;
            }
            this.getCityCode();
            this.getcountyCode();
            if (this.objForm.homepostcode) {
              this.objForm.postcode = this.objForm.homepostcode;
            }
          } else {
            this.unFlag = false;
          }
        }
      }
    },
    "objForm.rgtantmobile": function(value) {
      if (value) {
        this.unValue = true;
      }
    },
    "objForm.rgtantidno": function(value) {
      if (value && !this.unFlag) {
        this.unValueNo = true;
      } else {
        this.unValueNo = false;
      }
    },
    "objForm.accprovince": function(value) {
      if (value === "999999") {
        this.cityList = null;
        this.areaList = null;
      }
    },
    "objForm.rgtantprovince": function(value) {
      if (value === "999999") {
        this.cityList3 = null;
        this.areaList3 = null;
      }
    },
    "objForm.receiveaccprovinc": function(value) {
      if (value === "999999") {
        this.cityList2 = null;
        this.areaList2 = null;
      }
    }
  },
  created() {
    // this.riskResultList = riskResult.bodys;
    this.rgtno = this.$route.query.rgtno
      ? this.$route.query.rgtno
      : sessionStorage.getItem("rgtnumber");
    this.customerno = this.$route.query.customerno;
    this.clmno = this.$route.query.clmno;
    // this.objForm.agentphone = this.$route.query.phone;
    // this.objForm.contno = this.$route.query.contno;
    // this.objForm.agentcode = this.$route.query.agentcode;
    // this.IDTypes = IDType();
    // this.reasoncode ? (this.value = []) : (this.value = "");
  },
  mounted() {
    // 扣费原因枚举值获取
    this.koufeiReason = getCodeType("deductionReason");
    window.addEventListener("scroll", this.handleScroll, true);
    if (!this.customerno) {
      this.flagBtn = true;
    }

    this.getCodeList();
    this.getSheng();
    this.getPolicy1();
    this.getPolicy2();
    this.getPolicy3();
    this.getHeadBanks(); // 银行总行
    this.getBankAddress();
    this.getCityCode();
    this.getcountyCode();
    this.getBranchBank();
    this.initData1();
    this.getHospitals(); // 就诊医院
    this.queryTranNo(); // 微信悬浮框参数查询
    // this.getBanchBank();
    // this.getRiskRes(this.formData); //出险结果
    // this.getCupation(this.formData1);
    this.getCupationss(); //职业
    this.initInfor();
    if (!this.$route.query.phone) {
      if (this.$route.query.rgtno) {
        // this.initInfor();
      } else {
        if (this.customerno) {
          this.initTableMes();
          if (sessionStorage.getItem("ObjForm")) {
            // console.log(JSON.parse(sessionStorage.getItem("ObjForm")));
            let NewObj = {};
            NewObj = JSON.parse(sessionStorage.getItem("ObjForm"));
            this.objForm = NewObj;
            // Object.assign(this.objForm, NewObj);
            // this.objForm=JSON.parse(sessionStorage.getItem("ObjForm"))
            // alert("qwe");
            // this.objForm.rgtno = sessionStorage.getItem("rgtnumber");
          }
        }
      }
    } else {
      this.confirm = localStorage.getItem("confirm");

      //  this.initInfor();

      if (sessionStorage.getItem("ObjForm")) {
        this.objForm = JSON.parse(sessionStorage.getItem("ObjForm"));
        this.getCityCode();
        this.getcountyCode();

        // console.log(JSON.stringify(this.objForm))
        // this.changevinceres(this.objForm.accprovince)
        // this.changaccityres(this.objForm.acccity)

        // this.changevince3res(this.objForm.rgtantprovince)
        // this.changaccity3res(this.objForm.rgtantcity)

        // this.changevince2res(this.objForm.receiveaccprovinc)
        // this.changaccity2res(this.objForm.receivecity)
        // if (this.$route.query.phone) {
        //   this.objForm.agentphone = this.$route.query.phone;
        // }
        // if (this.$route.query.contno) {
        //   this.objForm.contno = this.$route.query.contno;
        // }
        // if (this.$route.query.agentcode) {
        //   this.objForm.agentcode = this.$route.query.agentcode;
        // }
      } else {
        // this.initInfor();
      }

      // if(sessionStorage.getItem("rgtnumber")){
      //   alert('111')
      //   this.initInfor();
      // }
    }

    // if (sessionStorage.getItem("rgtnumber") && !this.$route.query.phone) {
    //   this.initInfor();
    // }
    // new Promise(()=>{})
    if (
      this.objForm.receidno === "" &&
      this.objForm.contactway === "" &&
      this.objForm.bankaccno === "" &&
      this.objForm.headbankname === "" &&
      this.objForm.profession === "" &&
      this.objForm.annualincome === "" &&
      this.objForm.workunit === "" &&
      this.objForm.receiveaccprovinc === "" &&
      this.objForm.recename === "" &&
      this.objForm.workaddress === ""
    ) {
      this.flag1 = false;
      this.flag2 = false;
    }
    // setTimeout(() => {
    this.bjObjForm = {
      operator: localStorage.getItem("userCode"),
      mngcom: localStorage.getItem("comCode"),
      customerno: this.$route.query.customerno,
      rgtno: this.$route.query.rgtno,
      hospitalname: this.objForm.hospitalname
    };
    // }, 1000);
    console.log("aaaaa", this.bjObjForm);
    // 延时待初始化完成获取到rgtobj，再调用微信浮动框接口
    setTimeout(() => {
      if (this.$route.query.phone) {
        this.objForm.agentphone = this.$route.query.phone;
      }
      if (this.$route.query.contno) {
        this.objForm.contno = this.$route.query.contno;
      }
      if (this.$route.query.agentcode) {
        this.objForm.agentcode = this.$route.query.agentcode;
      }
      if (this.rgtobj != null) {
        this.$refs.dragno.queryRegisterRelation();
      }
    }, 1000);
    // Bus.$on("bJdialogVisible", bJdialogVisible => {
    //   this.bJdialogVisible = bJdialogVisible;
    // });
  },
  beforeDestroy() {
    this.$store.dispatch("titleshow", "");
    window.removeEventListener("scroll", this.handleScroll, true);
  },
  methods: {
    // 不予立案通知书打印
    noticepdfprint() {
      if (this.$route.query.rgtno) {
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存预览通知书！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              post(service.noticepdfprint, {
                rgtno: this.objForm.rgtno,
                noticeno: this.objForm.rgtno,
                printtype: "06"
              }).then(res => {
                if (res.data.pdflist) {
                  window.open(res.data.pdflist[0].pdfurl, "_blank");
                } else {
                  this.$message.error("未查询到预览pdf路径！");
                }
              });
            })
            .catch(() => {});
        } else {
          post(service.noticepdfprint, {
            rgtno: this.objForm.rgtno,
            noticeno: this.objForm.rgtno,
            printtype: "06"
          }).then(res => {
            if (res.data.pdflist) {
              window.open(res.data.pdflist[0].pdfurl, "_blank");
            } else {
              this.$message.error("未查询到预览pdf路径！");
            }
          });
        }
      } else {
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存预览通知书！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              post(service.noticepdfprint, {
                rgtno: this.objForm.rgtno,
                noticeno: this.objForm.rgtno,
                printtype: "06"
              }).then(res => {
                if (res.data.pdflist) {
                  window.open(res.data.pdflist[0].pdfurl, "_blank");
                } else {
                  this.$message.error("未查询到预览pdf路径！");
                }
              });
            })
            .catch(() => {});
        } else {
          if (!this.objForm.rgtno) {
            this.$message.error("请先保存页面信息！");
          } else {
            post(service.noticepdfprint, {
              rgtno: this.objForm.rgtno,
              noticeno: this.objForm.rgtno,
              printtype: "06"
            }).then(res => {
              if (res.data.pdflist) {
                window.open(res.data.pdflist[0].pdfurl, "_blank");
              } else {
                this.$message.error("未查询到预览pdf路径！");
              }
            });
          }
        }
      }
    },
    changeR() {
      if (this.objForm.norgtreason == "03") {
        this.objForm.reasondetail =
          "您好，您通过微信申请理赔，本次预赔付金额可能≥3000元.请及时将理赔资料原件提交本公司，本公司收到您提交的资料后将及时审核。谢谢！";
      } else {
        this.objForm.reasondetail = "";
      }
    },
    clickD() {
      this.timer = new Date().getTime();
      this.bJdialogVisible = true;
      if (this.$route.query.rgtno) {
        this.bjObjForm = {
          operator: localStorage.getItem("userCode"),
          mngcom: localStorage.getItem("comCode"),
          customerno: this.$route.query.customerno,
          rgtno: this.$route.query.rgtno,
          hospitalname: this.objForm.hospitalname
        };
        console.log(this.bjObjForm);
      } else {
        console.log(this.objForm.rgtno);
        this.bjObjForm = {
          operator: localStorage.getItem("userCode"),
          mngcom: localStorage.getItem("comCode"),
          customerno: this.$route.query.customerno,
          rgtno: this.objForm.rgtno,
          hospitalname: this.objForm.hospitalname
        };
      }
    },
    toBeijing() {
      var obj = {
        rgtno: this.objForm.rgtno,
        customerno: this.$route.query.customerno
      };
      this.$router.push({
        name: "BeijingBill",
        params: { dataOfTable: JSON.stringify(obj) }
      });
    },
    handleScroll() {
      let lOne = document.getElementById("0");
      let lSecnd = document.getElementById("1");
      let lThree = document.getElementById("2");
      let lFour = document.getElementById("3");
      let lFive = document.getElementById("4");
      let lSix = document.getElementById("5");
      let lSeven = document.getElementById("6");
      let lEight = document.getElementById("7");
      let lNine = document.getElementById("8");
      let dom = this.$refs.addFiling.parentElement;

      if (lOne.offsetTop - dom.scrollTop >= 60) {
        this.activeStep = 0;
      } else if (
        lSecnd.offsetTop - dom.scrollTop <= 110 &&
        lSecnd.offsetTop - dom.scrollTop >= 10
      ) {
        this.activeStep = 1;
      } else if (
        lThree.offsetTop - dom.scrollTop <= 110 &&
        lThree.offsetTop - dom.scrollTop >= 10
      ) {
        this.activeStep = 2;
      } else if (
        lFour.offsetTop - dom.scrollTop <= 110 &&
        lFour.offsetTop - dom.scrollTop >= 10
      ) {
        this.activeStep = 3;
      } else if (
        lFive.offsetTop - dom.scrollTop <= 110 &&
        lFive.offsetTop - dom.scrollTop >= 10
      ) {
        this.activeStep = 4;
      } else if (
        lSix.offsetTop - dom.scrollTop <= 110 &&
        lSix.offsetTop - dom.scrollTop >= 10
      ) {
        this.activeStep = 5;
      } else if (
        lSeven.offsetTop - dom.scrollTop <= 110 &&
        lSeven.offsetTop - dom.scrollTop >= 10
      ) {
        this.activeStep = 6;
      } else if (
        lEight.offsetTop - dom.scrollTop <= 110 &&
        lEight.offsetTop - dom.scrollTop >= 10
      ) {
        this.activeStep = 7;
      } else if (
        lNine.offsetTop - dom.scrollTop <= 110 &&
        lNine.offsetTop - dom.scrollTop >= 10
      ) {
        this.activeStep = 8;
      }
    },
    changeAcc() {
      this.objForm.exempt = "";
    },
    handlePaste() {},
    // 授权账户号码失焦
    bankAccountBluer(val) {
      if (this.bankAccountNumBlur === 1) {
        this.rules.bankaccno[0].message = "请再输入一次授权账号！";
        this.bankFirst = val;
        this.objForm.bankaccno = "";
        if (
          !this.objForm.receidno &&
          !this.objForm.contactway &&
          !this.objForm.bankaccno &&
          !this.objForm.headbankname &&
          !this.objForm.profession &&
          !this.objForm.annualincome &&
          !this.objForm.workunit &&
          !this.objForm.workaddress &&
          !this.objForm.receiveaccprovinc &&
          !this.objForm.recename
        ) {
          this.$message.warning("请再输入一次授权账号！");
        }
        this.$refs.input.focus();
        this.bankAccountNumBlur += 1;
      } else {
        if (val != this.bankFirst) {
          this.rules.bankaccno[0].message = "银行账号两次输入不一致 ！";
          this.bankAccountNumBlur -= 1;
          this.objForm.bankaccno = "";
          this.$refs.input.focus();
          if (
            !this.objForm.receidno &&
            !this.objForm.contactway &&
            !this.objForm.bankaccno &&
            !this.objForm.headbankname &&
            !this.objForm.profession &&
            !this.objForm.annualincome &&
            !this.objForm.workunit &&
            !this.objForm.workaddress &&
            !this.objForm.receiveaccprovinc &&
            !this.objForm.recename
          ) {
            this.$message.error("银行账号两次输入不一致 ！");
          }
        } else {
          this.rules.bankaccno[0].message = "授权账户号码不能为空！";
          this.bankAccountNumBlur -= 1;
        }
      }
    },

    ToCDB(str) {
      var result = "";
      for (var i = 0; i < str.length; i++) {
        if (str.charCodeAt(i) == 12288) {
          result += String.fromCharCode(str.charCodeAt(i) - 12256);
          continue;
        }
        if (str.charCodeAt(i) > 65280 && str.charCodeAt(i) < 65375)
          result += String.fromCharCode(str.charCodeAt(i) - 65248);
        else result += String.fromCharCode(str.charCodeAt(i));
      }
      str = result;
      return str;
    },
    // dataFilter(s){
    //   return s.replace(/(^\s*)|(\s*$)/g, "");
    // },
    // 备注信息弹框
    remarks() {
      if (!this.objForm.rgtno) {
        this.$message.error("请先完成立案登记 ！");
      } else {
        post(service.queryDesc, {
          bodys: {
            clmno: this.objForm.rgtno,
            customerno: this.customerno
          }
        }).then(res => {
          if (res.data.header.code === "200") {
            this.remarkFormVisible = true;
            this.remarkTableData = res.data.bodys;
            res.data.bodys.forEach(item => {
              item.maketimes = item.maketime.slice(0, 10);
            });
          }
        });
      }
    },
    // 备注分页
    handleSizeChangeRemark(val) {
      this.pagesizeRemark = val;
    },
    handleCurrentChangeRemark(val) {
      this.currpageRemark = val;
    },
    toShowRightDialog() {
      this.toShow = !this.toShow;
    },
    gobacks() {
      this.remarkFormVisible = false;
      this.remarkDesc = "";
    },
    // 添加备注信息
    addRemarks() {
      if (!this.remarkDesc) {
        this.$message.error("备注信息不能为空！");
      } else {
        post(service.insertDesc, {
          bodys: {
            clmno: this.objForm.rgtno,
            customerno: this.customerno,
            startphase: 2,
            describecontes: this.remarkDesc,
            usercode: localStorage.getItem("userCode")
          }
        }).then(res => {
          if (res.data.header.code === "200") {
            this.remarks();
            this.remarkDesc = "";
          }
        });
      }
    },
    goBank() {
      if (this.$route.query.rgtno) {
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          // if (this.isSave) {
          //   this.$router.push({ name: "TaskList" });
          // } else {
          this.$confirm("页面信息未保存，是否确认不保存离开本页面！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              this.$router.push({ name: "TaskList" });
            })
            .catch(() => {});
          // }

          // this.$router.push({ name: "TaskList" });
        } else {
          this.$router.push({ name: "TaskList" });
        }
      } else {
        if (!this.customerno) {
          this.$router.push({ name: "TaskList" });
          return false;
        }
        // this.$router.push({ name: "TaskList" });
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存离开本页面！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              this.$router.push({ name: "TaskList" });
            })
            .catch(() => {});
        } else {
          if (!this.customerno) {
            this.$router.push({ name: "TaskList" });
            return false;
          }
          if (this.objForm.rgtno) {
            this.$router.push({ name: "TaskList" });
          } else {
            this.$confirm(
              "页面信息未保存，是否确认不保存离开本页面！",
              "提示",
              {
                confirmButtonText: "是",
                cancelButtonText: "否",
                cancelButtonClass: "cancelButton",
                confirmButtonClass: "confirmButton",
                type: "warning",
                center: true
              }
            )
              .then(() => {
                this.$router.push({ name: "TaskList" });
              })
              .catch(() => {});
          }
        }
      }
    },

    toDocument() {
      if (this.$route.query.rgtno) {
        var obj = {
          // rgtno: this.$route.query.rgtno,
          rgtno: this.objForm.rgtno,
          customerno: this.$route.query.customerno,
          hospitalcode: this.objForm.hospitalname,
          // hospstartdate:this.objForm.inhospitaldate,
          // hospenddate:this.objForm.outhospitaldate,
          remark: ""
        };
        localStorage.setItem("objData", JSON.stringify(obj));
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存离开本页面！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              // if (localStorage.getItem("ZB") === "BJ") {
              this.$router.push({
                name: "BeijingBill",
                params: { dataOfTable: JSON.stringify(obj) }
              });
              // }
            })
            .catch(() => {});
        } else {
          // if (localStorage.getItem("ZB") === "BJ") {
          this.$router.push({
            name: "BeijingBill",
            params: { dataOfTable: JSON.stringify(obj) }
          });
          // }
        }
      } else {
        var obj = {
          rgtno: this.objForm.rgtno,
          customerno: this.$route.query.customerno
        };
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存离开本页面！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              // if (localStorage.getItem("ZB") === "BJ") {
              this.$router.push({
                name: "BeijingBill",
                params: { dataOfTable: JSON.stringify(obj) }
              });
              // }
              sessionStorage.removeItem("ObjForm");
            })
            .catch(() => {});
        } else {
          if (this.objForm.rgtno) {
            // if (localStorage.getItem("ZB") === "BJ") {
            this.$router.push({
              name: "BeijingBill",
              params: { dataOfTable: JSON.stringify(obj) }
            });
            // }

            sessionStorage.removeItem("ObjForm");
          } else {
            this.$message.error("请先保存页面信息！");
            sessionStorage.removeItem("ObjForm");
            // this.$confirm(
            //   "页面信息未保存，是否确认不保存离开本页面！",
            //   "提示",
            //   {
            //     confirmButtonText: "是",
            //     cancelButtonText: "否",
            //     cancelButtonClass: "cancelButton",
            //     confirmButtonClass: "confirmButton",
            //     type: "warning",
            //     center: true
            //   }
            // )
            //   .then(() => {
            //     this.$router.push({
            //       name: "GeneralMedical",
            //       params: { dataOfTable: JSON.stringify(obj) }
            //     });
            //     sessionStorage.removeItem("ObjForm");
            //   })
            //   .catch(() => {});
          }
        }
      }
    },
    // 提起调查
    getState() {
      if (localStorage.getItem("startinqflag") == "0") {
        return true;
      }
      if (this.flagBtn) {
        return true;
      }
    },
    toInitiateSurvey() {
      if (this.$route.query.rgtno) {
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存离开本页面！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              this.$router.push({
                name: "InitiateSurvey",
                query: {
                  // clmno: this.$route.query.rgtno
                  clmno: this.objForm.rgtno
                }
              });
            })
            .catch(() => {});
        } else {
          this.$router.push({
            name: "InitiateSurvey",
            query: {
              // clmno: this.$route.query.rgtno,
              clmno: this.objForm.rgtno
            }
          });
        }
      } else {
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存离开本页面！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              this.$router.push({
                name: "InitiateSurvey",
                query: {
                  // clmno: this.$route.query.rgtno
                  clmno: this.objForm.rgtno
                }
              });
              sessionStorage.removeItem("ObjForm");
            })
            .catch(() => {});
        } else {
          if (!this.objForm.rgtno) {
            // this.$confirm(
            //   "页面信息未保存，是否确认不保存离开本页面！",
            //   "提示",
            //   {
            //     confirmButtonText: "是",
            //     cancelButtonText: "否",
            //     cancelButtonClass: "cancelButton",
            //     confirmButtonClass: "confirmButton",
            //     type: "warning",
            //     center: true
            //   }
            // )
            //   .then(() => {
            //     this.$router.push({
            //       name: "InitiateSurvey",
            //       query: { clmno: this.objForm.rgtno }
            //     });
            //     sessionStorage.removeItem("ObjForm");
            //   })
            //   .catch(() => {});
            this.$message.error("请先保存页面信息！");
          } else {
            this.$router.push({
              name: "InitiateSurvey",
              query: { clmno: this.objForm.rgtno }
            });
          }
          // if (this.isSave) {
          //          this.$router.push({
          //   name: "InitiateSurvey",
          //   query: { clmno: this.$route.query.rgtno }
          // });
          //     sessionStorage.removeItem('ObjForm')

          // } else {
          //   this.$confirm(
          //     "页面信息未保存，是否确认不保存离开本页面！",
          //     "提示",
          //     {
          //       confirmButtonText: "是",
          //       cancelButtonText: "否",
          //       cancelButtonClass: "cancelButton",
          //       confirmButtonClass: "confirmButton",
          //       type: "warning",
          //       center: true
          //     }
          //   )
          //     .then(() => {
          //              this.$router.push({
          //   name: "InitiateSurvey",
          //   query: { clmno: this.$route.query.rgtno }
          // });
          //     sessionStorage.removeItem('ObjForm')

          //     })
          //     .catch(() => {});
          // }
        }
      }
    },
    // 影像查询
    toInitImg() {
      let routeUrl = this.$router.resolve({
        name: "initImg",
        query: { rgtno: this.objForm.rgtno }
      });
      window.open(routeUrl.href, "_blank");
    },
    // 回退查询
    initData1() {
      post(service.queryLLCaseBack, {
        bodys: {
          clmno: this.rgtno
        }
      }).then(res => {
        if (res.data.header.code === "200") {
          this.casebackList = res.data.bodys;
        }
      });
    },
    //前往回退查询页面
    torRollBackMes() {
      var obj = {
        rgtno: this.rgtno,
        customerno: this.$route.query.customerno
      };
      this.$router.push({
        name: "RollbackMes",
        params: {
          dataOfTable: JSON.stringify(obj)
        }
      });
    },
    // 获取总行
    getHeadBank() {
      this.bankFormData.pagestart = 0;
      this.bankFormData.pageend = 100;
      post(service.queryBank, {
        pagestart: this.bankFormData.pagestart,
        pageend: this.bankFormData.pageend,
        likename: this.objForm.headbankname
      }).then(res => {
        if (res.data.header.code === "200") {
          this.tBankList = res.data.bodys;
          this.objForm.province = "";
          this.objForm.bankname = "";
        }
      });
    },
    getHeadBanks() {
      this.bankFormData.pagestart = 0;
      this.bankFormData.pageend = 100;
      post(service.queryBank, {
        pagestart: this.bankFormData.pagestart,
        pageend: this.bankFormData.pageend,
        likename: this.objForm.headbankname
      }).then(res => {
        if (res.data.header.code === "200") {
          this.tBankList = res.data.bodys;
        }
      });
    },
    focusBank() {
      this.getBankAddress();
    },
    // 银行所在地区
    getBankAddress() {
      this.bankFormAddress.pagestart = 0;
      this.bankFormAddress.pageend = 100;
      post(service.queryBankLocation, {
        pagestart: this.bankFormAddress.pagestart,
        pageend: this.bankFormAddress.pageend,
        likename: ""
      }).then(res => {
        if (res.data.header.code === "200") {
          this.bankAddressList = res.data.bodys;
        }
      });
    },
    filterBankP(val) {
      if (val) {
        post(service.queryBankLocation, {
          pagestart: 0,
          pageend: 100,
          likename: val
        }).then(res => {
          if (res.data.header.code === "200") {
            this.bankAddressList = res.data.bodys;
          }
        });
      }
    },

    // 银行分行
    getBanchBank(key1, key2) {
      if (key1 && key2) {
        this.getBankAddress();
        post(service.queryTbanklocations, {
          bodys: {
            bankid: key1,
            standardareasid: key2
          }
        }).then(res => {
          if (res.data.header.code === "200") {
            this.branchBankList = res.data.bodys;
            this.objForm.bankname = "";
          }
        });
      }
    },

    clearMes() {
      this.objForm.acccity = null;
      this.objForm.acccounty = null;
      this.cityList = null;
      this.areaList = null;
    },
    clearArea() {
      this.objForm.acccounty = null;
      this.areaList = null;
    },
    clearMes1() {
      this.objForm.rgtantcity = null;
      this.objForm.rgtantcounty = null;
      this.cityList3 = null;
      this.areaList3 = null;
    },
    clearArea1() {
      this.objForm.rgtantcounty = null;
      this.areaList3 = null;
    },
    clearMes2() {
      this.objForm.receivecity = null;
      this.objForm.receivedistrict = null;
      this.cityList2 = null;
      this.areaList2 = null;
    },
    clearArea2() {
      this.objForm.receivedistrict = null;
      this.areaList2 = null;
    },
    clearBank() {
      this.objForm.bankname = null;
      this.branchBankList = null;
    },

    // 省--市
    changevince(key) {
      post(service.getCity, {
        bodys: {
          state: "city",
          code: key
        }
      }).then(res => {
        if (res.data.headers.code === "200") {
          this.cityList = res.data.bodys.rows;
          this.objForm.acccity = null;
          this.objForm.acccounty = null;
          this.areaList = null;
        }
      });
    },

    //通过市--县
    changaccity(key) {
      post(service.getCity, {
        bodys: {
          state: "country",
          code: key
        }
      }).then(res => {
        if (res.data.headers.code === "200") {
          this.areaList = res.data.bodys.rows;
          this.objForm.acccounty = null;
          // this.objForm.accaddress = null;
        }
      });
    },
    changeCounty() {
      // this.objForm.accaddress = null;
    },
    getLingCityCode() {
      if (this.objForm.receiveaccprovinc) {
        post(service.getCity, {
          bodys: {
            state: "city",
            code: this.objForm.receiveaccprovinc
          }
        }).then(res => {
          if (res.data.headers.code === "200") {
            this.cityList2 = res.data.bodys.rows;
          }
        });
      }
      if (this.objForm.receivecity) {
        post(service.getCity, {
          bodys: {
            state: "country",
            code: this.objForm.receivecity
          }
        }).then(res => {
          if (res.data.headers.code === "200") {
            this.areaList2 = res.data.bodys.rows;
          }
        });
      }
    },
    // 获取省==市
    changevince2(key) {
      post(service.getCity, {
        bodys: {
          state: "city",
          code: key
        }
      }).then(res => {
        if (res.data.headers.code === "200") {
          this.cityList2 = res.data.bodys.rows;
          this.objForm.receivecity = null;
          this.objForm.receivedistrict = null;
          this.areaList2 = null;
          // this.objForm.receiveaddress = null;
        }
      });
    },

    // 获取市==县
    changaccity2(key) {
      post(service.getCity, {
        bodys: {
          state: "country",
          code: key
        }
      }).then(res => {
        if (res.data.headers.code === "200") {
          this.areaList2 = res.data.bodys.rows;
          this.objForm.receivedistrict = null;
          // this.objForm.receiveaddress = null;
        }
      });
    },

    changeCounty2() {
      // this.objForm.receiveaddress = null;
    },
    // 获取省==市
    changevince3(key) {
      post(service.getCity, {
        bodys: {
          state: "city",
          code: key
        }
      }).then(res => {
        if (res.data.headers.code === "200") {
          this.cityList3 = res.data.bodys.rows;
          this.objForm.rgtantcity = null;
          this.objForm.rgtantcounty = null;
          this.areaList3 = null;
          // this.objForm.rgtantaddress = null;
        }
      });
    },

    // 获取市==县
    changaccity3(key) {
      post(service.getCity, {
        bodys: {
          state: "country",
          code: key
        }
      }).then(res => {
        if (res.data.headers.code === "200") {
          this.areaList3 = res.data.bodys.rows;
          this.objForm.rgtantcounty = null;
          // this.objForm.rgtantaddress = null;
        }
      });
    },
    changeCounty3() {
      // this.objForm.rgtantaddress = null;
    },

    // 获取省
    getSheng() {
      post(service.getCity, {
        bodys: {
          state: "province",
          code: ""
        }
      }).then(res => {
        if (res.data.headers.code === "200") {
          this.provinceList = res.data.bodys.rows;
          this.provinceList1 = res.data.bodys.rows;
          this.provinceList2 = res.data.bodys.rows;
          this.provinceList3 = res.data.bodys.rows;
        }
      });
    },
    getCityCode() {
      if (this.objForm.accprovince) {
        post(service.getCity, {
          bodys: {
            state: "city",
            code: this.objForm.accprovince
          }
        }).then(res => {
          if (res.data.headers.code === "200") {
            this.cityList = res.data.bodys.rows;
          }
        });
        // this.changevince(this.dangerInfor.accprovince)
      }
      if (this.objForm.rgtantprovince) {
        post(service.getCity, {
          bodys: {
            state: "city",
            code: this.objForm.rgtantprovince
          }
        }).then(res => {
          if (res.data.headers.code === "200") {
            this.cityList3 = res.data.bodys.rows;
          }
        });
        // this.changevince(this.dangerInfor.accprovince)
      }
      if (this.objForm.receiveaccprovinc) {
        post(service.getCity, {
          bodys: {
            state: "city",
            code: this.objForm.receiveaccprovinc
          }
        }).then(res => {
          if (res.data.headers.code === "200") {
            this.cityList2 = res.data.bodys.rows;
          }
        });
        // this.changevince(this.dangerInfor.accprovince)
      }
    },
    getcountyCode() {
      if (this.objForm.acccity) {
        // this.changaccity(this.dangerInfor.acccity)
        post(service.getCity, {
          bodys: {
            state: "country",
            code: this.objForm.acccity
          }
        }).then(res => {
          if (res.data.headers.code === "200") {
            this.areaList = res.data.bodys.rows;
          }
        });
      }
      if (this.objForm.rgtantcity) {
        // this.changaccity(this.dangerInfor.acccity)
        post(service.getCity, {
          bodys: {
            state: "country",
            code: this.objForm.rgtantcity
          }
        }).then(res => {
          if (res.data.headers.code === "200") {
            this.areaList3 = res.data.bodys.rows;
          }
        });
      }
      if (this.objForm.receivecity) {
        // this.changaccity(this.dangerInfor.acccity)
        post(service.getCity, {
          bodys: {
            state: "country",
            code: this.objForm.receivecity
          }
        }).then(res => {
          if (res.data.headers.code === "200") {
            this.areaList2 = res.data.bodys.rows;
          }
        });
      }
    },

    getBranchBank() {
      if (this.objForm.bankname) {
        post(service.queryTbanklocations, {
          bodys: {
            bankid: this.objForm.headbankname,
            standardareasid: this.objForm.province
          }
        }).then(res => {
          if (res.data.header.code === "200") {
            this.branchBankList = res.data.bodys;
            // this.objForm.bankname = "";
          }
        });
      }
    },
    zydescription(row, expandedRows) {
      this.expands = [];
      if (expandedRows.length > 0) {
        row ? this.expands.push(row.contno) : "";
      }
      console.log(expandedRows);
      let vm = this;
      let bodys = {
        contno: row.contno
      };
      post(service.getPolicyDetail, {
        bodys: {
          contno: row.contno
        }
      })
        .then(res => {
          this.policydetail = res.data.bodys;
        })
        .catch();
    },

    // 获取立案的保单信息
    getPolicy1() {
      post(service.lianPolicy, {
        bodys: {
          customerno: this.customerno
        }
      }).then(res => {
        if (res.data.header.code === "200") {
          this.policyArr1 = res.data.bodys;
          this.total1 = res.data.bodys.length;
        }
      });
    },
    // 获取立案的既往赔案信息
    getPolicy2() {
      post(service.lianJiwang, {
        bodys: {
          customerno: this.customerno
        }
      }).then(res => {
        if (res.data.header.code === "200") {
          this.policyArr2 = res.data.bodys;
          this.total2 = res.data.bodys.length;
        }
      });
    },
    // 获取保全记录
    getPolicy3() {
      post(service.lianBaoquan, {
        bodys: {
          customerno: this.customerno
        }
      }).then(res => {
        if (res.data.header.code === "200") {
          this.policyArr3 = res.data.bodys;
          this.total3 = res.data.bodys.length;
        }
      });
    },
    // 立案详情查询接口
    initInfor() {
      let _this = this;
      (_this.filingArr = [
        {
          url: service.occperson,
          params: {
            bodys: {
              customerno: this.customerno,
              rgtno: _this.rgtno
            }
          }
        },
        {
          url: service.rgtntregister,
          params: {
            bodys: {
              rgtno: _this.rgtno
            }
          }
        },
        {
          url: service.occinformation,
          params: {
            bodys: {
              customerno: this.customerno,
              rgtno: _this.rgtno
            }
          }
        },
        {
          url: service.rgantperson,
          params: {
            bodys: {
              rgtno: _this.rgtno
            }
          }
        },
        {
          url: service.receviceperson,
          params: {
            bodys: {
              rgtno: _this.rgtno
            }
          }
        },
        {
          url: service.conculsionregister,
          params: {
            bodys: {
              rgtno: _this.rgtno
            }
          }
        }
      ]),
        _this.filingArr.forEach(postItem => {
          _this.axiosList.push(post(postItem.url, postItem.params));
        });
      axios.all(_this.axiosList).then(function(res) {
        if (res[0].data.headers.code === "500") {
          this.$message.error(res[0].data.headers.message);
          return;
        }
        _this.tableMessage1 = res[0].data.bodys.rows[0];

        // sessionStorage.setItem('accno',_this.tableMessage1.accno)
        // 出险人信息
        if (res[1].data.headers.code === "500") {
          _this.$message.error(res[1].data.headers.message);
          return;
        }
        _this.tableMessage2 = res[1].data.bodys.rows[0];
        // 立案申请信息
        if (res[2].data.headers.code === "500") {
          _this.$message.error(res[2].data.headers.message);
          return;
        }
        _this.tableMessage3 = res[2].data.bodys.rows[0];
        // 出险信息
        if (res[3].data.headers.code === "500") {
          _this.$message.error(res[3].data.headers.message);
          return;
        }
        _this.tableMessage4 = res[3].data.bodys.rows[0];
        // 申请人信息
        if (res[4].data.headers.code === "500") {
          _this.$message.error(res[4].data.headers.message);
          return;
        }
        _this.tableMessage5 = res[4].data.bodys.rows[0];
        // 领款人信息
        if (res[5].data.headers.code === "500") {
          _this.$message.error(res[5].data.headers.message);
          return;
        }
        _this.tableMessage6 = res[5].data.bodys.rows[0];
        // 立案结论信息

        let newObj = {};

        Object.assign(
          _this.objForm,
          _this.tableMessage1,
          _this.tableMessage2,
          _this.tableMessage3,
          _this.tableMessage4,
          _this.tableMessage5,
          _this.tableMessage6
        );
        _this.getSheng();
        _this.getCityCode();
        _this.getcountyCode();
        _this.getBranchBank();
        // if (result.data.headers.code === "200") {

        // }

        //   .then(result => {
        //     if (result.data.headers.code === "200") {
        //       debugger
        //       // _this.getRescode = result.data.bodys
        //       _this.getRescode = result.data.bodys.rows.map(e => {
        //         return e.codename;
        //       });
        //       // this.caseData = result.data.bodys;
        //     }
        //   })
        //   .catch();
        // //获取理赔类型
        _this.bigObj = JSON.stringify(_this.objForm);
      });
    },
    getCodeList: function() {
      post(service.getCodeList, {
        // 证件类型，性别，出险类型 事故原因
        codetype: [
          "llidtype",
          "llsex",
          "accidenttype",
          "accdegree",
          "accreason",
          "llrelation",
          "llclaimtype"
        ]
      }).then(res => {
        console.log(res);
        if (res.data.header.code === "200") {
          this.cardTypeList = res.data.bodys["llidtype"]; // 证件类型
          console.log("zzza", this.cardTypeList);
          this.sexList = res.data.bodys["llsex"]; // 性别
          this.accidenttypeList = res.data.bodys["accidenttype"]; // 出险类型
          this.shoushangList = res.data.bodys["accdegree"]; // 受伤程度
          this.accReasonList = res.data.bodys["accreason"]; // 事故原因
          this.relations = res.data.bodys["llrelation"]; // 申请人与出险人关系
          // this.chuxianResult = res.data.bodys["accresult"]; // 出险结果
          this.llclaimtypeList = res.data.bodys["llclaimtype"]; // 理赔类型

          // if (this.customerno) {
          //   this.initTableMes();
          // }
          // if (!this.rgtno && this.customerno) {
          //   debugger
          //   this.initTableMes();
          // }
        }
      });
    },
    // 获取职业
    codeToname: function(obj, arr) {
      var a = null;
      arr.forEach(element => {
        if (element.code === obj) {
          a = element.name;
        }
      });
      return a;
    },
    currentChange1: function(page) {
      this.currentPage1 = page;
      // this.tableList();
    },
    currentChange2: function(page) {
      this.currentPage2 = page;
      // this.tableList();
    },
    currentChange3: function(page) {
      this.currentPage3 = page;
      // this.tableList();
    },
    indexMethod1(index) {
      return index + 1 + (this.currentPage1 - 1) * 10;
    },
    indexMethod2(index) {
      return index + 1 + (this.currentPage2 - 1) * 10;
    },
    indexMethod3(index) {
      return index + 1 + (this.currentPage3 - 1) * 10;
    },
    // updataCity: function () {
    //   // this.payeeForm.headbankname = '';
    //   // this.payeeForm.province = '';
    //   // this.payeeForm.bankname = '';

    //   this.array.forEach((item, index) => {
    //     if (item.name == this.payeeForm.headbankname) {
    //       this.cityArr = item.address;
    //       console.log(this.cityArr);
    //     }
    //   });
    // },
    //更新区数据
    // updataSub: function () {
    //   this.cityArr.forEach((item, index) => {
    //     if (item.name == this.payeeForm.province) {
    //       this.addressArr = item.address;
    //       console.log(this.addressArr);
    //     }
    //   });
    // },
    updataBank: function() {
      this.addressArr.forEach((item, index) => {
        if (item.name == this.payeeForm.city) {
          this.bankArr = item.address;
        }
      });
    },
    toChangeRel(val) {
      // if (this.objForm.contno != localStorage.getItem("ConTno")) {
      //   post(service.queryPayeeInfo, {
      //     bodys: {
      //       contno: localStorage.getItem("ConTno"),
      //       relationtocont: val
      //     }
      //   }).then(res => {
      //     // this.objForm.relationtocont = res.data.bodys.relationtocont
      //     if (res.data.headers.code === "200") {
      //       this.objForm.recename = res.data.bodys.recename;
      //       this.objForm.profession = res.data.bodys.profession;
      //       this.objForm.annualincome = res.data.bodys.annualincome;
      //       this.objForm.receidtype = res.data.bodys.receidtype;
      //       this.objForm.receidno = res.data.bodys.receidno;
      //       this.objForm.headbankname = res.data.bodys.headbankname;
      //       this.objForm.province = res.data.bodys.province;
      //       this.objForm.bankname = res.data.bodys.bankname;
      //       this.objForm.bankaccno = res.data.bodys.bankaccno;
      //       this.objForm.receiveaccprovinc = res.data.bodys.receiveaccprovinc;
      //       this.objForm.receivecity = res.data.bodys.receivecity;
      //       this.objForm.receivedistrict = res.data.bodys.receivedistrict;
      //       this.objForm.receiveaddress = res.data.bodys.receiveaddress;
      //       this.objForm.contactway = res.data.bodys.contactway;
      //       this.objForm.workunit = res.data.bodys.workunit;
      //       this.objForm.workaddress = res.data.bodys.workaddress;
      //     }
      //   });
      // } else {

      // }
      if (val) {
        post(service.queryPayeeInfo, {
          bodys: {
            contno: this.$route.query.contno || this.objForm.contno,
            relationtocont: val,
            rgtno: this.objForm.rgtno
          }
        })
          .then(res => {
            if (res.data.headers.code === "200") {
              this.objForm.recename = res.data.bodys.recename;
              this.objForm.profession = res.data.bodys.profession;
              this.objForm.annualincome = res.data.bodys.annualincome;
              this.objForm.receidtype = res.data.bodys.receidtype;
              this.objForm.receidno = res.data.bodys.receidno;
              this.objForm.headbankname = res.data.bodys.headbankname;
              this.objForm.province = res.data.bodys.province;
              this.objForm.bankname = res.data.bodys.bankname;
              this.objForm.bankaccno = res.data.bodys.bankaccno;
              this.objForm.receiveaccprovinc = res.data.bodys.receiveaccprovinc;
              this.objForm.receivecity = res.data.bodys.receivecity;
              this.objForm.receivedistrict = res.data.bodys.receivedistrict;
              this.objForm.receiveaddress = res.data.bodys.receiveaddress;
              this.objForm.contactway = res.data.bodys.contactway;
              this.objForm.workunit = res.data.bodys.workunit;
              this.objForm.workaddress = res.data.bodys.workaddress;
              // this.changevince2(this.objForm.receiveaccprovinc)
            }
          })
          .then(() => {
            this.getLingCityCode();
          });
      }
    },
    clearName() {
      this.objForm.recename = "";
      this.objForm.profession = "";
      this.objForm.annualincome = "";
      this.objForm.receidtype = "";
      this.objForm.receidno = "";
      this.objForm.headbankname = "";
      this.objForm.province = "";
      this.objForm.bankname = "";
      this.objForm.bankaccno = "";
      this.objForm.receiveaccprovinc = "";
      this.objForm.receivecity = "";
      this.objForm.receivedistrict = "";
      this.objForm.receiveaddress = "";
      this.objForm.contactway = "";
      this.objForm.workunit = "";
      this.objForm.workaddress = "";
      this.$refs.objForm.clearValidate();
    },
    save2(formName) {
      if (this.objForm.norgtreason != "05") {
        post(service.checkPayeeInfo, {
          bodys: {
            contNo: this.objForm.contno,
            relationtocont: this.objForm.relationtocont,
            reasoncode: this.objForm.reasoncode,
            deathDate: this.objForm.deathdate,
            recename: this.objForm.recename,
            profession: this.objForm.profession,
            annualincome: this.objForm.annualincome,
            receidtype: this.objForm.receidtype,
            receidno: this.objForm.receidno,
            headbankname: this.objForm.headbankname,
            province: this.objForm.province,
            bankname: this.objForm.bankname,
            bankaccno: this.objForm.bankaccno,
            receiveaccprovinc: this.objForm.receiveaccprovinc,
            receivecity: this.objForm.receivecity,
            receivedistrict: this.objForm.receivedistrict,
            receiveaddress: this.objForm.receiveaddress,
            contactway: this.objForm.contactway,
            workunit: this.objForm.workunit,
            workaddress: this.objForm.workaddress
          }
        }).then(res => {
          if (res.data.headers.success === true) {
            // this.saveForm();
            this.confirmCase(formName);
          } else {
            this.$message.error(res.data.headers.message);
          }
        });
      } else {
        this.confirmCase(formName);
      }
    },
    noFiling() {
      post(service.noFiling, {
        bodys: {
          rgtno: this.objForm.rgtno,
          rgtconclusion: this.objForm.rgtconclusion
        }
      }).then(res => {});
    },
    // 保存
    saveForm() {
      // this.unCheck = true;
      // console.log(this.accNo);
      this.$refs.objForm.clearValidate();
      // this.$refs.receidno.clearValidate()
      // this.$refs.bankaccno.clearValidate()
      // this.$refs.contactway.clearValidate()
      // this.$refs.profession.clearValidate()
      if (!this.customerno) {
        this.$message("请选择出险人！");
        return false;
      }
      this.isSaveFlag = false;
      this.saveFlag = true;
      if (!this.objForm.contno) {
        this.$message({
          showClose: true,
          message: "保单号为必填项!",
          type: "error"
        });
        return false;
      }

      if (this.objForm.idenddate) {
        // if (time1 > idenddate) {
        let time1 =
          new Date(localStorage.getItem("isDate")).getTime() -
            1 * 24 * 60 * 60 * 1000 ||
          new Date().getTime() - 1 * 24 * 60 * 60 * 1000;
        let idenddate = new Date(this.objForm.idenddate).getTime();
        if (time1 > idenddate) {
          this.$message({
            showClose: true,
            message: "证件有效期止期不能小于当前日期!",
            type: "error"
          });
          return false;
        }
      }
      if (this.objForm.applydate) {
        let time2 =
          new Date(localStorage.getItem("isDate")).getTime() ||
          new Date().getTime();
        let applydate = new Date(ISYMD(this.objForm.applydate)).getTime();
        // let CCC = ;
        console.log("FFF", applydate);
        if (time2 < applydate) {
          this.$message({
            showClose: true,
            message: "申请日期不能大于当前日期!",
            type: "error"
          });
          return false;
        }
      }
      if (this.objForm.accidentdate) {
        let time3 =
          new Date(localStorage.getItem("isDate")).getTime() ||
          new Date().getTime();
        let accidentdate = new Date(this.objForm.accidentdate).getTime();
        if (time3 < accidentdate) {
          this.$message({
            showClose: true,
            message: "出险日期不能大于当前系统日期!",
            type: "error"
          });
          return false;
        }
      }
      if (this.objForm.dianosedate && this.objForm.accidentdate) {
        if (this.objForm.dianosedate < this.objForm.accidentdate) {
          this.$message({
            showClose: true,
            message: "确诊日期不能小于出险日期!",
            type: "error"
          });
          return false;
        }
      }
      if (this.objForm.deathdate && this.objForm.accidentdate) {
        if (this.objForm.deathdate < this.objForm.accidentdate) {
          this.$message({
            showClose: true,
            message: "身故日期不能小于出险日期!",
            type: "error"
          });
          return false;
        }
      }
      if (this.objForm.dianosedate) {
        let time3 =
          new Date(localStorage.getItem("isDate")).getTime() ||
          new Date().getTime();
        let dianosedate = new Date(this.objForm.dianosedate).getTime();
        if (time3 < dianosedate) {
          this.$message({
            showClose: true,
            message: "确诊日期不能大于当前系统日期!",
            type: "error"
          });
          return false;
        }
      }
      if (this.objForm.deathdate) {
        let time3 =
          new Date(localStorage.getItem("isDate")).getTime() ||
          new Date().getTime();
        let deathdate = new Date(this.objForm.deathdate).getTime();
        if (time3 < deathdate) {
          this.$message({
            showClose: true,
            message: "身故日期不能大于当前系统日!",
            type: "error"
          });
          return false;
        }
      }
      if (this.objForm.rgtantmobile) {
        var reg = /^\d+$|^\d+[.]?\d+$/;
        if (!reg.test(this.objForm.rgtantmobile)) {
          this.$message.error("申请人电话号码不合法");
          return false;
        } else {
          if (this.objForm.rgtantmobile.substr(0, 1) != 1) {
            this.$message.error("申请人电话号码不合法");
            return false;
          } else {
            if (this.objForm.rgtantmobile.length !== 11) {
              this.$message.error("申请人电话号码不合法");
              return false;
            }
          }
        }
      }
      if (this.objForm.remark) {
        var reg = /^\d+$|^\d+[.]?\d+$/;
        if (!reg.test(this.objForm.remark)) {
          this.$message.error("出险人电话号码不合法");
          return false;
        } else {
          if (this.objForm.remark.substr(0, 1) == 1) {
            if (this.objForm.remark.length != 11) {
              this.$message.error("出险人电话号码不合法");
              return false;
            }
          }
        }
      }
      if (this.objForm.contactway) {
        var reg = /^\d+$|^\d+[.]?\d+$/;
        if (!reg.test(this.objForm.contactway)) {
          this.$message.error("领款人电话号码不合法");
          return false;
        } else {
          if (this.objForm.contactway.substr(0, 1) == 1) {
            if (this.objForm.contactway.length != 11) {
              this.$message.error("领款人电话号码不合法");
              return false;
            }
          }
        }
      }

      // if (this.objForm.receidno) {
      //   const reg1 = /^[0-9a-zA-Z]*$/g;
      //   if (!reg1.test(this.objForm.receidno)) {
      //     this.$message.errreceidnoor("请输入合法的证件号码");
      //     return false;
      //   } else {
      //     if (
      //       this.objForm.receidno.length != 15 &&
      //       this.objForm.receidno.length != 18
      //     ) {
      //       this.$message.error("身份证只能为15位或18位");
      //       return false;
      //     } else {
      //       const reg = /(^[1-9]\d{5}(18|19|([23]\d))\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}$)/;
      //       if (!reg.test(this.objForm.receidno)) {
      //         this.$message.error("请输入合法的的身份证号码");
      //         return false;
      //       }
      //     }
      //   }
      // }
      if (this.objForm.receidtype === "1") {
        if (this.objForm.receidno) {
          const reg1 = /^[0-9a-zA-Z]*$/g;
          if (!reg1.test(this.objForm.receidno)) {
            this.$message.error("请输入合法的证件号码");
            return false;
          } else {
            if (
              this.objForm.receidno.length != 15 &&
              this.objForm.receidno.length != 18
            ) {
              this.$message.error("身份证只能为15位或18位");
              return false;
            } else {
              const reg = /(^[1-9]\d{5}(18|19|([23]\d))\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}$)/;
              if (!reg.test(this.objForm.receidno)) {
                this.$message.error("请输入合法的的身份证号码");
                return false;
              }
            }
          }
        }
      }
      if (this.objForm.receidtype === "2" || this.objForm.receidtype === "8") {
        if (this.objForm.receidno) {
          if (!this.unFlag) {
            let reg = /^[0-9a-zA-Z]*$/g;
            if (!reg.test(this.objForm.receidno)) {
              this.$message.error("请输入合法的证件号码");
              return false;
            } else {
              if (this.objForm.receidno.length < 6) {
                this.$message.error("护照的长度必须大于等于6");
                return false;
              }
            }
          }
        }
      }
      if (
        this.objForm.receidtype != "2" &&
        this.objForm.receidtype !== "8" &&
        this.objForm.receidtype != "1"
      ) {
        if (this.objForm.receidno) {
          const reg = /^[0-9a-zA-Z]*$/g;
          if (!reg.test(this.objForm.receidno)) {
            this.$message.error("请输入合法的证件号码");
            return false;
          }
        }
      }
      if (this.objForm.rgtantidtype === "1" && !this.objForm.relation == "00") {
        if (this.objForm.rgtantidno) {
          if (!this.unFlag) {
            const reg1 = /^[0-9a-zA-Z]*$/g;
            if (!reg1.test(this.objForm.rgtantidno)) {
              this.$message.error("请输入合法的证件号码");
              return false;
            } else {
              if (
                this.objForm.rgtantidno.length != 15 &&
                this.objForm.rgtantidno.length != 18
              ) {
                this.$message.error("身份证只能为15位或18位");
                return false;
              } else {
                const reg = /(^[1-9]\d{5}(18|19|([23]\d))\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}$)/;
                if (!reg.test(this.objForm.rgtantidno)) {
                  this.$message.error("请输入合法的的身份证号码");
                  return false;
                }
              }
            }
          }
        }
      }
      if (
        this.objForm.rgtantidtype === "2" ||
        (this.objForm.rgtantidtype === "8" && !this.objForm.relation == "00")
      ) {
        if (this.objForm.rgtantidno) {
          if (!this.unFlag) {
            let reg = /^[0-9a-zA-Z]*$/g;
            if (!reg.test(this.objForm.rgtantidno)) {
              this.$message.error("请输入合法的证件号码");
              return false;
            } else {
              if (this.objForm.rgtantidno.length < 6) {
                this.$message.error("护照的长度必须大于等于6");
                return false;
              }
            }
          }
        }
      }
      if (
        this.objForm.rgtantidtype != "2" &&
        this.objForm.rgtantidtype !== "8" &&
        this.objForm.rgtantidtype != "1" &&
        this.objForm.relation != "00"
      ) {
        if (this.objForm.rgtantidno) {
          if (!this.unFlag) {
            const reg = /^[0-9a-zA-Z]*$/g;
            if (!reg.test(this.objForm.rgtantidno)) {
              this.$message.error("请输入合法的证件号码");
              return false;
            }
          }
        }
      }
      if (this.objForm.annualincome) {
        var reg = /^\d+$|^\d*\.\d+$/g;
        if (!reg.test(this.objForm.annualincome)) {
          this.$message.error("只能填写数字！");
          return false;
        } else {
          // if (
          //   this.objForm.annualincome.substr(0, 1) === "." ||
          //   this.objForm.annualincome.substr(-1, 1) === "."
          // ) {
          //   this.$message.error("只能填写数字！");
          //   return false;
          // } else {
          var amtreg = /^(\d+)(.\d{0,2})?$/;
          if (!amtreg.test(this.objForm.annualincome)) {
            this.$message.error("最多支持两位小数！");
            return false;
          }
          // }
        }
      }
      if (!this.objForm.rgtno) {
        // 影像归档-校验
        post(service.checkIsexitImageInfo, {
          bodys: {
            contno: this.objForm.contno
          }
        }).then(res => {
          if (res.data.header.code === "200") {
            // 影像归档
            post(service.imageInfoFileToStstem, {
              bodys: {
                contno: this.objForm.contno,
                claimno: this.objForm.rgtno
              }
            }).then(res => {
              if (res.data.header.code === "200") {
              }
            });
            post(service.saveregister, {
              bodys: this.objForm
            }).then(res => {
              if (res.data.headers.code === "200") {
                this.$message.success(res.data.headers.message);
                this.isSave = true;
                sessionStorage.setItem(
                  "rgtnumber",
                  res.data.bodys.rows[0].rgtno
                );
                // this.objForm.rgtno=res.data.bodys.rows[0].rgtno;
                this.objForm.rgtno = JSON.parse(
                  JSON.stringify(res.data.bodys.rows[0].rgtno)
                );
                if (sessionStorage.getItem("ObjForm")) {
                  this.objForm.rgtno = sessionStorage.getItem("rgtnumber");
                  this.$forceUpdate();
                }

                this.genObj = {
                  rgtno: sessionStorage.getItem("rgtnumber"),
                  customerno: this.$route.query.customerno
                };
                this.bigObj2 = JSON.stringify(this.objForm);

                //   // 定义
                this.bigObj = JSON.stringify(this.objForm);
                this.noFiling();
              }
            });
          } else if (res.data.header.code === "505") {
            var strMes =
              "请确认保单号" +
              this.objForm.contno +
              "下是否扫描了理赔影像信息" +
              "?";
            this.$confirm(strMes, "提示", {
              confirmButtonText: "是",
              cancelButtonText: "否",
              type: "warning",
              center: true
            })
              .then(() => {
                // 影像归档
                post(service.imageInfoFileToStstem, {
                  bodys: {
                    contno: this.objForm.contno,
                    claimno: this.objForm.rgtno
                  }
                }).then(res => {
                  if (res.data.header.code === "200") {
                  }
                });
                post(service.saveregister, {
                  bodys: this.objForm
                }).then(res => {
                  if (res.data.headers.code === "200") {
                    this.$message.success(res.data.headers.message);
                    this.isSave = true;
                    sessionStorage.setItem(
                      "rgtnumber",
                      res.data.bodys.rows[0].rgtno
                    );
                    // this.objForm.rgtno=res.data.bodys.rows[0].rgtno;
                    this.objForm.rgtno = JSON.parse(
                      JSON.stringify(res.data.bodys.rows[0].rgtno)
                    );
                    if (sessionStorage.getItem("ObjForm")) {
                      //   this.objForm.rgtno=JSON.parse(
                      //   JSON.stringify(res.data.bodys.rows[0].rgtno)
                      // );
                      // alert(this.objForm.rgtno);
                      this.objForm.rgtno = sessionStorage.getItem("rgtnumber");
                      this.$forceUpdate();
                    }

                    this.genObj = {
                      rgtno: sessionStorage.getItem("rgtnumber"),
                      customerno: this.$route.query.customerno
                    };
                    // this.objForm.accno = JSON.parse(
                    //   JSON.stringify(res.data.bodys.rows[0].accno)
                    // );
                    this.bigObj2 = JSON.stringify(this.objForm);

                    //   // 定义
                    this.bigObj = JSON.stringify(this.objForm);
                    this.noFiling();
                  }
                });
              })
              .catch(() => {
                this.$message({
                  type: "info",
                  message: "请更新保单号！"
                });
              });
          } else {
            this.$message.error(res.data.hearders.message);
          }
        });
      } else {
        post(service.saveregister, {
          bodys: this.objForm
        }).then(res => {
          if (res.data.headers.code === "200") {
            this.$message.success(res.data.headers.message);
            this.isSave = true;
            sessionStorage.setItem("rgtnumber", res.data.bodys.rows[0].rgtno);
            // this.objForm.rgtno=res.data.bodys.rows[0].rgtno;
            this.objForm.rgtno = JSON.parse(
              JSON.stringify(res.data.bodys.rows[0].rgtno)
            );
            if (sessionStorage.getItem("ObjForm")) {
              this.objForm.rgtno = sessionStorage.getItem("rgtnumber");
              this.$forceUpdate();
            }

            this.genObj = {
              rgtno: sessionStorage.getItem("rgtnumber"),
              customerno: this.$route.query.customerno
            };
            // this.objForm.accno = JSON.parse(
            //   JSON.stringify(res.data.bodys.rows[0].accno)
            // );
            this.bigObj2 = JSON.stringify(this.objForm);

            //   // 定义
            this.bigObj = JSON.stringify(this.objForm);
            this.noFiling();
          }
        });
        // 影像归档
        post(service.imageInfoFileToStstem, {
          bodys: {
            contno: this.objForm.contno,
            claimno: this.objForm.rgtno
          }
        }).then(res => {
          if (res.data.header.code === "200") {
          }
        });
      }

      // }
      // });
    },
    // 立案确认
    disConfirmCase() {
      if (localStorage.getItem("registerflag") == "0") {
        return true;
      }
      if (this.flagBtn) {
        return true;
      }
    },
    confirmCase(formName) {
      let _this = this;
      this.$refs.objForm.validate();

      this.confirm = false;

      if (_this.objForm.norgtreason != "05") {
        if (!_this.customerno) {
          _this.$message("请选择出险人！");
          return false;
        }
        // console.log(this.objForm.rgtno);
      }
      if (_this.objForm.rgtno) {
        if (_this.objForm.norgtreason != "05") {
          if (_this.objForm.idenddate) {
            let time1 =
              new Date(localStorage.getItem("isDate")).getTime() -
                1 * 24 * 60 * 60 * 1000 ||
              new Date().getTime() - 1 * 24 * 60 * 60 * 1000;
            let idenddate = new Date(_this.objForm.idenddate).getTime();
            if (time1 > idenddate) {
              _this.$message({
                showClose: true,
                message: "证件有效期止期不能小于当前日期!",
                type: "error"
              });
              return false;
            }
          }
          if (_this.objForm.applydate) {
            let time2 =
              new Date(localStorage.getItem("isDate")).getTime() ||
              new Date().getTime();
            // let applydate = new Date(_this.objForm.applydate).getTime();
            let applydate = new Date(ISYMD(_this.objForm.applydate)).getTime();
            if (time2 < applydate) {
              _this.$message({
                showClose: true,
                message: "申请日期不能大于当前日期!",
                type: "error"
              });
              return false;
            }
          }
          if (_this.objForm.accidentdate) {
            let time3 =
              new Date(localStorage.getItem("isDate")).getTime() ||
              new Date().getTime();
            let accidentdate = new Date(_this.objForm.accidentdate).getTime();
            if (time3 < accidentdate) {
              _this.$message({
                showClose: true,
                message: "出险日期不能大于当前系统日期!",
                type: "error"
              });
              return false;
            }
          }
          if (_this.objForm.dianosedate && _this.objForm.accidentdate) {
            if (_this.objForm.dianosedate < _this.objForm.accidentdate) {
              _this.$message({
                showClose: true,
                message: "确诊日期不能小于出险日期!",
                type: "error"
              });
              return false;
            }
          }
          if (_this.objForm.deathdate && _this.objForm.accidentdate) {
            if (_this.objForm.deathdate < _this.objForm.accidentdate) {
              _this.$message({
                showClose: true,
                message: "身故日期不能小于出险日期!",
                type: "error"
              });
              return false;
            }
          }
          if (_this.objForm.dianosedate) {
            let time3 =
              new Date(localStorage.getItem("isDate")).getTime() ||
              new Date().getTime();
            let dianosedate = new Date(_this.objForm.dianosedate).getTime();
            if (time3 < dianosedate) {
              _this.$message({
                showClose: true,
                message: "确诊日期不能大于当前系统日期!",
                type: "error"
              });
              return false;
            }
          }
          if (_this.objForm.deathdate) {
            let time3 =
              new Date(localStorage.getItem("isDate")).getTime() ||
              new Date().getTime();
            let deathdate = new Date(_this.objForm.deathdate).getTime();
            if (time3 < deathdate) {
              _this.$message({
                showClose: true,
                message: "身故日期不能大于当前系统日!",
                type: "error"
              });
              return false;
            }
          }
          // if (_this.objForm.inhospitaldate && _this.objForm.dianosedate) {
          //   if (_this.objForm.inhospitaldate > _this.objForm.dianosedate) {
          //     _this.$message({
          //       showClose: true,
          //       message: "入院日期不能大于确诊日期!",
          //       type: "error"
          //     });
          //     return false;
          //   }
          // }
          // if (_this.objForm.deathdate && _this.objForm.outhospitaldate) {
          //   if (_this.objForm.deathdate < _this.objForm.outhospitaldate) {
          //     _this.$message({
          //       showClose: true,
          //       message: "身故日期不能小于出院日期!",
          //       type: "error"
          //     });
          //     return false;
          //   }
          // }
          // ==========================================================================
          // if (_this.objForm.receidno) {
          //   const reg1 = /^[0-9a-zA-Z]*$/g;
          //   if (!reg1.test(_this.objForm.receidno)) {
          //     _this.$message.error("请输入合法的证件号码");
          //     return false;
          //   } else {
          //     if (
          //       _this.objForm.receidno.length != 15 &&
          //       _this.objForm.receidno.length != 18
          //     ) {
          //       _this.$message.error("身份证只能为15位或18位");
          //       return false;
          //     } else {
          //       const reg = /(^[1-9]\d{5}(18|19|([23]\d))\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}$)/;
          //       if (!reg.test(_this.objForm.receidno)) {
          //         _this.$message.error("请输入合法的的身份证号码");
          //         return false;
          //       }
          //     }
          //   }
          // }
          // if (
          //   _this.objForm.rgtantidtype === "1" &&
          //   !_this.objForm.relation == "00"
          // ) {
          //   if (_this.objForm.rgtantidno) {
          //     if (!_this.unFlag) {
          //       const reg1 = /^[0-9a-zA-Z]*$/g;
          //       if (!reg1.test(_this.objForm.rgtantidno)) {
          //         _this.$message.error("请输入合法的证件号码");
          //         return false;
          //       } else {
          //         if (
          //           _this.objForm.rgtantidno.length != 15 &&
          //           _this.objForm.rgtantidno.length != 18
          //         ) {
          //           _this.$message.error("身份证只能为15位或18位");
          //           return false;
          //         } else {
          //           const reg = /(^[1-9]\d{5}(18|19|([23]\d))\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}[0-9Xx]$)|(^[1-9]\d{5}\d{2}(((0[13578]|10|12)(0[1-9]|[12]\d|3[01]))|((0[469]|11)(0[1-9]|[12]\d|30))|(02(0[1-9]|[12]\d)))\d{3}$)/;
          //           if (!reg.test(_this.objForm.rgtantidno)) {
          //             _this.$message.error("请输入合法的的身份证号码");
          //             return false;
          //           }
          //         }
          //       }
          //     }
          //   }
          // }
          // if (
          //   _this.objForm.rgtantidtype === "2" ||
          //   (_this.objForm.rgtantidtype === "8" &&
          //     !_this.objForm.relation == "00")
          // ) {
          //   if (_this.objForm.rgtantidno) {
          //     if (!_this.unFlag) {
          //       let reg = /^[0-9a-zA-Z]*$/g;
          //       if (!reg.test(_this.objForm.rgtantidno)) {
          //         _this.$message.error("请输入合法的证件号码");
          //         return false;
          //       } else {
          //         if (_this.objForm.rgtantidno.length < 6) {
          //           _this.$message.error("护照的长度必须大于等于6");
          //           return false;
          //         }
          //       }
          //     }
          //   }
          // }
          // if (
          //   _this.objForm.rgtantidtype != "2" &&
          //   _this.objForm.rgtantidtype !== "8" &&
          //   _this.objForm.rgtantidtype != "1" &&
          //   _this.objForm.relation != "00"
          // ) {
          //   if (_this.objForm.rgtantidno) {
          //     if (!_this.unFlag) {
          //       const reg = /^[0-9a-zA-Z]*$/g;
          //       if (!reg.test(_this.objForm.rgtantidno)) {
          //         _this.$message.error("请输入合法的证件号码");
          //         return false;
          //       }
          //     }
          //   }
          // }
          // if (_this.objForm.annualincome) {
          //   var reg = /^\d+$|^\d*\.\d+$/g;
          //   if (!reg.test(_this.objForm.annualincome)) {
          //     _this.$message.error("只能填写数字！");
          //     return false;
          //   } else {
          //     if (
          //       _this.objForm.annualincome.substr(0, 1) === "." ||
          //       _this.objForm.annualincome.substr(-1, 1) === "."
          //     ) {
          //       _this.$message.error("只能填写数字！");
          //       return false;
          //     } else {
          //       var amtreg = /^(\d+)(.\d{0,2})?$/;
          //       if (!amtreg.test(_this.objForm.annualincome)) {
          //         _this.$message.error("最多支持两位小数！");
          //         return false;
          //       }
          //     }
          //   }
          // }
        }
        // console.log(_this.$refs[formName].rule)
        _this.$refs[formName].validate(valid => {
          if (!valid && _this.objForm.norgtreason != "05") {
            _this.$message.error("页面信息填写不完整！");
            return false;
          } else {
            if (!_this.$route.query.rgtno) {
              if (_this.bigObj2 == JSON.stringify(_this.objForm)) {
                post(service.registerconfirm, {
                  bodys: {
                    customerno: _this.customerno,
                    rgtno: _this.objForm.rgtno,
                    mngcom: localStorage.getItem("comCode"),
                    operator: localStorage.getItem("userCode")
                  }
                }).then(res => {
                  if (res.data.headers.code === "200") {
                    _this.$message({
                      message: res.data.headers.message,
                      type: "success"
                    });
                    _this.$router.push({ name: "TaskList" });
                  } else {
                    _this.$message({
                      message: res.data.headers.message,
                      type: "warning"
                    });
                  }
                });
              } else {
                // console.log(this.saveFlag);
                // this.saveFlag = false;
                // console.log(this.saveFlag);
                if (this.bigObj2 !== JSON.stringify(this.objForm)) {
                  this.$message.error("页面信息未保存");
                } else {
                  post(service.registerconfirm, {
                    bodys: {
                      customerno: _this.customerno,
                      rgtno: _this.objForm.rgtno,
                      mngcom: localStorage.getItem("comCode"),
                      operator: localStorage.getItem("userCode")
                    }
                  }).then(res => {
                    if (res.data.headers.code === "200") {
                      _this.$message({
                        message: res.data.headers.message,
                        type: "success"
                      });
                      _this.$router.push({ name: "TaskList" });
                    } else {
                      _this.$message({
                        message: res.data.headers.message,
                        type: "warning"
                      });
                    }
                  });
                }
              }
            }

            if (_this.$route.query.rgtno) {
              if (_this.bigObj == JSON.stringify(_this.objForm)) {
                post(service.registerconfirm, {
                  bodys: {
                    customerno: _this.customerno,
                    rgtno: _this.objForm.rgtno,
                    mngcom: localStorage.getItem("comCode"),
                    operator: localStorage.getItem("userCode")
                  }
                }).then(res => {
                  if (res.data.headers.code === "200") {
                    _this.$message({
                      message: res.data.headers.message,
                      type: "success"
                    });
                    _this.$router.push({ name: "TaskList" });
                  } else {
                    _this.$message({
                      message: res.data.headers.message,
                      type: "warning"
                    });
                  }
                });
              } else {
                if (this.bigObj !== JSON.stringify(this.objForm)) {
                  this.$message.error("页面信息未保存");
                } else {
                  post(service.registerconfirm, {
                    bodys: {
                      customerno: _this.customerno,
                      rgtno: _this.objForm.rgtno,
                      mngcom: localStorage.getItem("comCode"),
                      operator: localStorage.getItem("userCode")
                    }
                  }).then(res => {
                    if (res.data.headers.code === "200") {
                      _this.$message({
                        message: res.data.headers.message,
                        type: "success"
                      });
                      _this.$router.push({ name: "TaskList" });
                    } else {
                      _this.$message({
                        message: res.data.headers.message,
                        type: "warning"
                      });
                    }
                  });
                }
              }
            }
          }
        });
      } else {
        _this.$message("确认前请先进行立案保存！");
        return false;
      }
    },
    getRiskPer() {
      this.abc = true;
      if (this.objForm.relation === "01") {
        this.unFlag = false;
        if (this.objForm.rgtantname === this.objForm.occname) {
          this.objForm.rgtantname = "";
          this.objForm.rgtantidtype = "";
          this.objForm.rgtantidno = "";
          this.objForm.rgtantmobile = "";
          this.objForm.rgtantprovince = "";
          this.objForm.rgtantcity = "";
          this.objForm.rgtantcounty = "";
          this.objForm.rgtantaddress = "";
          this.objForm.postcode = "";
        }
        this.unCheck = false;
      } else if (this.objForm.relation === "02") {
        this.unFlag = false;
        if (this.objForm.rgtantname === this.objForm.occname) {
          this.objForm.rgtantname = "";
          this.objForm.rgtantidtype = "";
          this.objForm.rgtantidno = "";
          this.objForm.rgtantmobile = "";
          this.objForm.rgtantprovince = "";
          this.objForm.rgtantcity = "";
          this.objForm.rgtantcounty = "";
          this.objForm.rgtantaddress = "";
          this.objForm.postcode = "";
        }
      } else if (this.objForm.relation === "03") {
        this.unFlag = false;
        if (this.objForm.rgtantname === this.objForm.occname) {
          this.objForm.rgtantname = "";
          this.objForm.rgtantidtype = "";
          this.objForm.rgtantidno = "";
          this.objForm.rgtantmobile = "";
          this.objForm.rgtantprovince = "";
          this.objForm.rgtantcity = "";
          this.objForm.rgtantcounty = "";
          this.objForm.rgtantaddress = "";
          this.objForm.postcode = "";
        }
      } else if (this.objForm.relation === "99") {
        this.unFlag = false;
        if (this.objForm.rgtantname === this.objForm.occname) {
          this.objForm.rgtantname = "";
          this.objForm.rgtantidtype = "";
          this.objForm.rgtantidno = "";
          this.objForm.rgtantmobile = "";
          this.objForm.rgtantprovince = "";
          this.objForm.rgtantcity = "";
          this.objForm.rgtantcounty = "";
          this.objForm.rgtantaddress = "";
          this.objForm.postcode = "";
        }
      }
    },
    toMarketerSelection() {
      this.confirm = true;
      localStorage.setItem("confirm", this.confirm);
      this.btn = true;
      sessionStorage.setItem("ObjForm", JSON.stringify(this.objForm));
      this.objForm = JSON.parse(sessionStorage.getItem("ObjForm"));

      this.$router.push({
        name: "MarketerSelection",
        query: { customerno: this.customerno, rgtno: this.$route.query.rgtno }
      });
    },
    toRiskList() {
      this.$router.push({ name: "RiskList" });
    },
    // 生成照会
    getPhotoState() {
      if (localStorage.getItem("notesignflag") == "0") {
        return true;
      }
      if (this.flagBtn) {
        return true;
      }
    },
    toPhoto() {
      if (this.$route.query.rgtno) {
        if (!this.objForm.contno) {
          this.$message.error("请先保存页面信息！");
          return;
        }
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存离开本页面！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              this.$router.push({
                name: "InitiatingPhoto",
                query: {
                  clmno: this.objForm.rgtno,
                  customerno:
                    this.$route.query.customerno ||
                    sessionStorage.getItem("customerno")
                }
              });
            })
            .catch(() => {});
        } else {
          this.$router.push({
            name: "InitiatingPhoto",
            query: {
              clmno: this.objForm.rgtno,
              customerno:
                this.$route.query.customerno ||
                sessionStorage.getItem("customerno")
            }
          });
        }
      } else {
        // if (!this.$route.query.rgtno) {
        //   this.$message.error("请先保存页面信息！");
        //   sessionStorage.removeItem("ObjForm");
        //   return
        // }
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存离开本页面！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              this.$router.push({
                name: "InitiatingPhoto",
                query: {
                  clmno: this.objForm.rgtno,
                  customerno:
                    this.$route.query.customerno ||
                    sessionStorage.getItem("customerno")
                }
              });
              sessionStorage.removeItem("ObjForm");
            })
            .catch(() => {});
        } else {
          // if(!this.$route.query.rgtno){
          //   this.$message.error("请先保存页面信息！");
          //   sessionStorage.removeItem("ObjForm");
          // }
          if (!this.objForm.rgtno) {
            this.$message.error("请先保存页面信息！");
            sessionStorage.removeItem("ObjForm");
          } else {
            this.$router.push({
              name: "InitiatingPhoto",
              query: {
                clmno: this.objForm.rgtno,
                customerno:
                  this.$route.query.customerno ||
                  sessionStorage.getItem("customerno")
              }
            });
            sessionStorage.removeItem("ObjForm");
            // this.$confirm(
            //   "页面信息未保存，是否确认不保存离开本页面！",
            //   "提示",
            //   {
            //     confirmButtonText: "是",
            //     cancelButtonText: "否",
            //     cancelButtonClass: "cancelButton",
            //     confirmButtonClass: "confirmButton",
            //     type: "warning",
            //     center: true
            //   }
            // )
            //   .then(() => {
            //     this.$router.push({
            //       name: "InitiatingPhoto",
            //       query: {
            //         clmno: this.objForm.rgtno,
            //         customerno: sessionStorage.getItem("customerno")
            //       }
            //     });
            //     sessionStorage.removeItem("ObjForm");
            //   })
            //   .catch(() => {});
          }
        }
      }
    },
    initTableMes() {
      // var _this = this;
      // 出险人信息
      post(service.querycustomer1, {
        bodys: {
          customerno: this.customerno,
          mngcom: localStorage.getItem("comCode"),
          operator: localStorage.getItem("userCode")
        }
      }).then(res => {
        if (res.data.headers.code === "200") {
          this.objForm.rgtno = res.data.bodys.rows[0].rgtno;
          this.objForm.occname = res.data.bodys.rows[0].occname;
          this.objForm.occidtype = res.data.bodys.rows[0].occidtype;
          this.objForm.occidno = res.data.bodys.rows[0].occidno;
          this.objForm.sex = res.data.bodys.rows[0].sex;
          this.objForm.age = res.data.bodys.rows[0].age;
          this.objForm.remark = res.data.bodys.rows[0].remark;
          this.objForm.homepostcode = res.data.bodys.rows[0].homepostcode;
          this.objForm.homeprovince = res.data.bodys.rows[0].homeprovince;
          this.objForm.homecity = res.data.bodys.rows[0].homecity;
          this.objForm.homecommunity = res.data.bodys.rows[0].homecommunity;
          this.objForm.homecounty = res.data.bodys.rows[0].homecounty;
          this.Oaccprovince = res.data.bodys.rows[0].homeprovince;
          this.Oacccity = res.data.bodys.rows[0].homecity;
          this.Oacccounty = res.data.bodys.rows[0].homecounty;
          this.Oaccaddress = res.data.bodys.rows[0].homecommunity;
          this.objForm.idenddate = res.data.bodys.rows[0].idenddate;
          this.getCityCode();
          this.getcountyCode();
          if (sessionStorage.getItem("ObjForm")) {
            this.objForm.remark = JSON.parse(
              sessionStorage.getItem("ObjForm")
            ).remark;
          }
          if (sessionStorage.getItem("ObjForm")) {
            this.objForm.idenddate = JSON.parse(
              sessionStorage.getItem("ObjForm")
            ).idenddate;
          }
        }
        // 定义
        this.bigObj = JSON.stringify(this.objForm);
      });
    },
    handleClick(tab, event) {
      this.isbox = true;
      if (tab.index === "0") {
        this.style1 = "margin: 0 0 0 15px";
      }
      if (tab.index === "1") {
        this.style1 = "margin: 0 0 0 141px";
        // this.style1="transform: translateX(100%+15px)"
      }
      if (tab.index === "2") {
        this.style1 = "margin: 0 0 0 270px";
      }
      // if (tab.index === "3") {
      //   this.style1 = "margin: 0 0 0 333px";
      // }
    },
    jump(index) {
      if (index == "top") {
        document.getElementById(0).scrollIntoView();
        this.$store.dispatch("titleshow", "");
      } else {
        this.activeStep = index;
        this.$store.dispatch("titleshow", "true");
        setTimeout(() => {
          if (this.$store.getters.titleclose == "true") {
            document.getElementById(index).scrollIntoView();
          }
        }, 300);
      }
    },
    loadmore() {
      this.pageData.startPage += 100;
      this.pageData.endPage += 100;
      // this.getHospitals(this.pageData);
      post(service.getHospital, {
        pagestart: this.pageData.startPage,
        pageend: this.pageData.endPage,
        likename: this.objForm.hospitalname
      }).then(res => {
        // this.hospitalLists = res.data.bodys;
        this.hospitalLists = [...this.hospitalLists, ...res.data.bodys];
      });
    },
    loadmore3() {
      this.bankFormData.pagestart += 100;
      post(service.queryBank, {
        pagestart: this.bankFormData.pagestart,
        pageend: this.bankFormData.pageend,
        likename: this.objForm.headbankname
      }).then(res => {
        // this.hospitalLists = res.data.bodys;
        this.tBankList = [...this.tBankList, ...res.data.bodys];
      });
    },
    loadmore4() {
      this.bankFormAddress.pagestart += 100;
      post(service.queryBankLocation, this.bankFormAddress).then(res => {
        // this.hospitalLists = res.data.bodys;
        this.bankAddressList = [...this.bankAddressList, ...res.data.bodys];
      });
    },
    loadmore1() {
      this.formData.pagestart++;
      this.getRiskRes(this.formData);
    },
    loadmore2() {
      // this.formData1.pagestart++;
      this.formData1.pagestart += 100;
      this.formData1.pageend += 100;
      this.getCupation(this.formData1);
    },
    getHospitals() {
      setTimeout(() => {
        post(service.getHospital, {
          pagestart: this.pageData.startPage,
          pageend: this.pageData.endPage,
          likename: this.objForm.hospitalname
        }).then(res => {
          if (res.data.bodys) {
            this.hospitalLists = res.data.bodys;
            this.remarkContents = this.hospitalLists[0].remark;
          } else {
            this.objForm.hospitalname = "";
          }
        });
      }, 1000);
    },
    changeHospital(item) {
      post(service.getHospital, {
        pagestart: 0,
        pageend: 100,
        likename: item
      }).then(res => {
        if (res.data.bodys[0].remark) {
          this.remarkContents = res.data.bodys[0].remark;
        } else {
          this.remarkContents = "";
        }
      });
    },
    clearHospital() {
      // this.objForm.hospitalname = "";
      this.pageData.startPage = 0;
      this.pageData.endPage = 100;
      post(service.getHospital, {
        pagestart: this.pageData.startPage,
        pageend: this.pageData.endPage,
        // likename: this.objForm.hospitalname
        likename: ""
      }).then(res => {
        this.hospitalLists = res.data.bodys;
        if (res.data.bodys == []) {
          this.objForm.hospitalname = "";
        }
      });
    },
    filtered(val) {
      this.pageData.startPage = 0;
      this.pageData.endPage = 100;
      // this.objForm.hospitalname = val;
      if (val != "") {
        // this.getHospitals(val);
        post(service.getHospital, {
          pagestart: this.pageData.startPage,
          pageend: this.pageData.endPage,
          likename: val
        }).then(res => {
          if (!res.data.bodys) {
            this.objForm.hospitalname = "";
          } else {
            this.hospitalLists = res.data.bodys;
            this.remarkContents = this.hospitalLists[0].remark;
          }
        });
      }
    },
    filtered3(val) {
      this.objForm.startPage = 0;
      this.objForm.endPage = 100;
      this.objForm.headbankname = val;
      if (val != "") {
        this.getHeadBank(val);
      }
    },
    getRiskRes(formData) {
      post(service.ldaccresult, {
        bodys: formData
      }).then(res => {
        const _res = res.data.bodys;
        this.riskResultList = [...this.riskResultList, ..._res];
      });
    },
    // 职业
    // getCupation() {
    //   post(service.occupation, {
    //     // this.objForm.profession
    //     likename: "",
    //     pageend: this.formData1.pageend,
    //     pagestart: this.formData1.pagestart
    //   }).then(res => {
    //     const _res1 = res.data.bodys;
    //     this.workList = [...this.workList, ..._res1];
    //   });
    // },
    // 初始化职业
    getCupationss() {
      setTimeout(() => {
        post(service.occupation, {
          // this.objForm.profession
          likename: "",
          pageend: 800,
          pagestart: 0
        }).then(res => {
          const _res1 = res.data.bodys;
          this.workList = [...this.workList, ..._res1];
        });
      }, 500);
    },
    // ==========================================================
    queryTranNo() {
      post(service.queryTranNo, {
        bodys: {
          rgtno: this.$route.query.rgtno
        }
      }).then(res => {
        // console.log("ZZZZA",res)
        this.rgtobj = res.data.bodys.rgtobj;
        if (res.data.bodys.rgtclass == "") {
          this.rgtclass = "柜面渠道";
        } else if (res.data.bodys.rgtclass == "02") {
          this.rgtclass = "柜面渠道";
        } else if (res.data.bodys.rgtclass == "01") {
          this.rgtclass = "微信渠道";
        } else if (res.data.bodys.rgtclass == "03") {
          this.rgtclass = "电话中心渠道";
        }
      });
    },
    // 点击医疗单证录入
    getHos() {
      if (this.$route.query.rgtno) {
        var obj = {
          rgtno: this.objForm.rgtno,
          customerno: this.$route.query.customerno,
          hospitalcode: this.objForm.hospitalname,
          remark: ""
        };
        console.log("obj", obj);
        localStorage.setItem("objData", JSON.stringify(obj));
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存离开本页面！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              this.isShowhospital = true;
              if (this.rgtno && this.customerno) {
                this.getCfee();
              }
              this.getHospitalsz();
              this.getHospitalsz1();
            })
            .catch(() => {});
        } else {
          this.isShowhospital = true;
          if (this.rgtno && this.customerno) {
            this.getCfee();
          }
          this.getHospitalsz();
          this.getHospitalsz1();
        }
      } else {
        var obj = {
          rgtno: this.objForm.rgtno,
          customerno: this.$route.query.customerno
        };
        if (this.bigObj !== JSON.stringify(this.objForm)) {
          this.$confirm("页面信息未保存，是否确认不保存离开本页面！", "提示", {
            confirmButtonText: "是",
            cancelButtonText: "否",
            cancelButtonClass: "cancelButton",
            confirmButtonClass: "confirmButton",
            type: "warning",
            center: true
          })
            .then(() => {
              this.isShowhospital = true;
              if (obj.rgtno && obj.customerno) {
                this.getCfee();
              }
              this.getHospitalsz();
              this.getHospitalsz1();
              sessionStorage.removeItem("ObjForm");
            })
            .catch(() => {});
        } else {
          if (this.objForm.rgtno) {
            this.isShowhospital = true;
            if (obj.rgtno && obj.customerno) {
              this.getCfee();
            }
            // this.getfydata();
            this.changeKoufeiItem(this.pageData);
            this.changeFeeitemdetil(this.pageData);
            this.getHospitalsz();
            this.getHospitalsz1();

            sessionStorage.removeItem("ObjForm");
          } else {
            this.$message.error("请先保存页面信息！");
            sessionStorage.removeItem("ObjForm");
          }
        }
      }
    },
    // 门诊医院
    filteredz(val) {
      this.pageDataz1.startPage = 0;
      this.pageDataz1.endPage = 100;
      if (val != "") {
        // setTimeout(() => {
        for (let key in this.commonOutpatient) {
          if (this.hosState == key) {
            // this.commonOutpatient[key].hospitalcode = val;
            this.hospitalListsnamez = val;
            // this.getHospitalsz(val);

            post(service.getHospital, {
              pagestart: this.pageDataz1.startPage,
              pageend: this.pageDataz1.endPage,
              likename: val || ""
            }).then(res => {
              this.hospitalListsz = res.data.bodys;
              this.newhospitalListsz.push(this.hospitalListsz);
              this.newhospitalListsz[key] = res.data.bodys;
            });
          }
        }
        // }, 100);
      }
    },
    // 门诊医院
    getRow(row, index) {
      this.hosState = index;
      this.hospitalListsnamez = "";
      this.pageDataz1.startPage = 0;
      this.pageDataz1.endPage = 100;
      post(service.getHospital, {
        pagestart: this.pageDataz1.startPage,
        pageend: this.pageDataz1.endPage,
        likename: ""
      }).then(res => {
        this.hospitalListsz = res.data.bodys;
        this.newhospitalListsz.push(this.hospitalListsz);
        this.newhospitalListsz[index] = res.data.bodys;
      });
    },
    // 门诊医院
    getHospitalsz() {
      setTimeout(() => {
        for (let key in this.commonOutpatient) {
          post(service.getHospital, {
            pagestart: this.pageDataz1.startPage,
            pageend: this.pageDataz1.endPage,
            likename: this.commonOutpatient[key].hospitalcode || ""
          }).then(res => {
            this.hospitalListsz = res.data.bodys;
            this.newhospitalListsz.push(this.hospitalListsz);
            this.newhospitalListsz[key] = res.data.bodys;
          });
        }
      }, 800);
    },
    loadmorez11() {
      this.pageDataz1.startPage += 100;
      this.pageDataz1.endPage += 100;
      post(service.getHospital, {
        pagestart: this.pageDataz1.startPage,
        pageend: this.pageDataz1.endPage,
        likename: this.hospitalListsnamez || ""
      }).then(res => {
        this.hospitalListsz = [...this.hospitalListsz, ...res.data.bodys];
        this.newhospitalListsz.push(this.hospitalListsz);
        this.newhospitalListsz[this.hosState] = [
          ...this.hospitalListsz,
          ...res.data.bodys
        ];
      });
    },
    // ---------------------------------------------------------------
    // 住院医院
    filteredz1(val) {
      // row.hospitalcode = val;
      this.pageDataz2.startPage = 0;
      this.pageDataz2.endPage = 100;
      if (val != "") {
        // setTimeout(() => {
        for (let key in this.commonHospital) {
          if (this.hosState1 == key) {
            // this.commonHospital[key].hospitalcode = val;
            this.hospitalListsnamez1 = val;
            // this.getHospitalsz1(val);
            post(service.getHospital, {
              pagestart: this.pageDataz2.startPage,
              pageend: this.pageDataz2.endPage,
              likename: val || ""
            }).then(res => {
              this.hospitalListsz1 = res.data.bodys;
              this.newhospitalListsz1.push(this.hospitalListsz1);
              this.newhospitalListsz1[key] = res.data.bodys;
            });
          }
        }
        // }, 500);
      }
    },
    // 住院医院
    getRow1(row, index) {
      this.hosState1 = index;
      this.hospitalListsnamez1 = "";
      this.pageDataz2.startPage = 0;
      this.pageDataz2.endPage = 100;
      post(service.getHospital, {
        pagestart: this.pageDataz2.startPage,
        pageend: this.pageDataz2.endPage,
        likename: ""
      }).then(res => {
        this.hospitalListsz1 = res.data.bodys;
        this.newhospitalListsz1.push(this.hospitalListsz1);
        this.newhospitalListsz1[index] = res.data.bodys;
      });
    },
    // 住院医院
    getHospitalsz1() {
      // setTimeout(() => {
      for (let key in this.commonHospital) {
        post(service.getHospital, {
          pagestart: this.pageDataz2.startPage,
          pageend: this.pageDataz2.endPage,
          likename: this.commonHospital[key].hospitalcode || ""
        }).then(res => {
          this.hospitalListsz1 = res.data.bodys;
          this.newhospitalListsz1.push(this.hospitalListsz1);
          this.newhospitalListsz1[key] = res.data.bodys;
        });
      }
      // }, 800);
    },
    loadmoresz1() {
      this.pageDataz2.startPage += 100;
      this.pageDataz2.endPage += 100;
      post(service.getHospital, {
        pagestart: this.pageDataz2.startPage,
        pageend: this.pageDataz2.endPage,
        likename: this.hospitalListsnamez1 || ""
      }).then(res => {
        this.hospitalListsz1 = [...this.hospitalListsz1, ...res.data.bodys];
        this.newhospitalListsz1.push(this.hospitalListsz1);
        this.newhospitalListsz1[this.hosState1] = [
          ...this.hospitalListsz1,
          ...res.data.bodys
        ];
      });
    },
    // ------<toFixed重写>-----
    round(num, decimal) {
      if (isNaN(num)) {
        return 0;
      }
      const p1 = Math.pow(10, decimal + 1);
      const p2 = Math.pow(10, decimal);
      return Math.round((num * p1) / 10) / p2;
    },
    toFixeds(num, decimal) {
      return this.round(num, decimal).toFixed(decimal);
    },
    //  ------<toFixed重写End>-----
    // 保留两位
    twoNum(obj) {
      if (obj.selfamnt > 0) {
        obj.selfamnt = this.toFixeds(parseFloat(obj.selfamnt), 2);
      } else if (obj.selfamnt == 0) {
        obj.selfamnt = 0;
      } else {
        obj.selfamnt = null;
      }
      if (obj.price >= 0) {
        obj.price = this.toFixeds(parseFloat(obj.price), 2);
      } else {
        obj.price = null;
      }

      if (obj.deductfee >= 0) {
        obj.deductfee = this.toFixeds(parseFloat(obj.deductfee), 2);
      } else {
        obj.deductfee = null;
      }
    },
    // 普通病房天数校验
    checkUnumber1(row, index) {
      let aa = /^[0-9]+([.]{1}[5]){0,1}$/;
      if (!aa.test(row.realhospdate)) {
        this.$message({
          message: "修改天数只能0.5的倍数调整",
          type: "error"
        });
        row.realhospdate = this.realDate[index];
        return;
      } else {
        if (
          row.realhospdate > this.realDate[index] + 1 ||
          row.realhospdate < this.realDate[index] - 1
        ) {
          this.$message({
            message: "修改天数与系统计算天数相差不能超过1天！",
            type: "error"
          });
          row.realhospdate = this.realDate[index];
          return;
        }
      }
    },
    // 重症病房天数校验
    checkUnumber2(data) {
      let aa = /^[0-9]+([.]{1}[5]){0,1}$/;
      if (!aa.test(data.imhospdate)) {
        this.$message({
          message: "修改天数只能0.5的倍数调整",
          type: "error"
        });
        data.imhospdate = 0;
      }
    },
    // 就诊时间不能大于当前时间
    changeFeeDate(key) {
      if (
        (new Date(localStorage.getItem("isDate")).getTime() -
          new Date(key.feedate).getTime()) /
          1000 <
        0
      ) {
        this.$message({
          message: "就诊时间不能大于当前日期",
          type: "error"
        });
        key.feedate = null;
      }
    },
    //  收据赔付金额 = 费用总金额-统筹/附加金额-其他补偿-扣费明细；
    getAll(res) {
      if (res.selfamnt > 0) {
        res.selfamnt = this.toFixeds(parseFloat(res.selfamnt), 2);
      } else if (res.selfamnt == 0) {
        res.selfamnt = 0;
      } else {
        res.selfamnt = null;
      }

      if (res.socifee >= 0) {
        res.socifee = this.toFixeds(parseFloat(res.socifee), 2);
      } else if (res.socifee == "") {
        res.socifee = 0.0;
      } else {
        res.socifee = null;
      }
      if (res.otherfee >= 0) {
        res.otherfee = this.toFixeds(parseFloat(res.otherfee), 2);
      } else if (res.otherfee == "") {
        this.otherfee == 0.0;
      } else {
        res.otherfee = null;
      }
      if (
        res.billmoney != null &&
        res.socifee != null &&
        res.otherfee != null &&
        res.refusemoney != null
      ) {
        var tbillmoney = parseFloat(res.billmoney);
        var tsocifee = parseFloat(res.socifee);
        var totherfee = parseFloat(res.otherfee);
        var trefusemoney = parseFloat(res.refusemoney);
        var tselfamnt = parseFloat(res.selfamnt);
        res.indemnity = this.toFixeds(
          tbillmoney - tsocifee - trefusemoney - totherfee - tselfamnt,
          2
        );
        return;
      } else {
        res.indemnity = null;
      }
    },
    // 入院日期校验
    changeHospstartdate(key) {
      if (key.hospstartdate && key.hospenddate) {
        if (
          (new Date(key.hospstartdate).getTime() -
            new Date(key.hospenddate).getTime()) /
            1000 >
          0
        ) {
          this.$message({
            message: "入院日期不能大于出院日期",
            type: "error"
          });
          key.hospstartdate = null;
          return;
        }
      }
      if (key.hospenddate && key.hospstartdate) {
        if (key.hospenddate == key.hospstartdate) {
          key.realhospdate = sumDays(key.hospstartdate, key.hospenddate) + 1;
        } else {
          key.realhospdate = sumDays(key.hospstartdate, key.hospenddate);
        }
      }
    },
    // 出院日期校验
    changeHospenddate(key, index) {
      if (key.hospstartdate && key.hospenddate) {
        if (
          (new Date(key.hospstartdate).getTime() -
            new Date(key.hospenddate).getTime()) /
            1000 >
          0
        ) {
          this.$message({
            message: "出院日期不能小于入院日期",
            type: "error"
          });
          key.hospenddate = null;
          return;
        }
      }
      if (key.hospenddate && key.hospstartdate) {
        if (key.hospenddate == key.hospstartdate) {
          key.realhospdate = sumDays(key.hospstartdate, key.hospenddate) + 1;
        } else {
          key.realhospdate = sumDays(key.hospstartdate, key.hospenddate);
        }
        this.realDate[index] = key.realhospdate;
        console.log("SSS2", this.realDate);
      }
    },
    // 收据编号重复校验
    inputMainfeeno(obj) {
      var newArr = [];
      newArr = this.commonOutpatient.concat(this.commonHospital).map(e => {
        return e.mainfeeno;
      });
      if (obj.mainfeeno) {
        if (
          !checkdeff(newArr, obj.mainfeeno, "1") ||
          !checkdeff(this.getNumList, obj.mainfeeno, "2")
        ) {
          this.$message({
            message: "医疗收据编号重复录入",
            type: "error"
          });
          obj.mainfeeno = null;
        }
      }
    },
    // 收据编号重复校验
    inputMainfeeno1(obj) {
      var newArr = [];
      newArr = this.commonOutpatient.concat(this.commonHospital).map(e => {
        return e.mainfeeno;
      });
      if (obj.mainfeeno) {
        if (
          !checkdeff(newArr, obj.mainfeeno, "1") ||
          !checkdeff(this.getNumList, obj.mainfeeno, "2")
        ) {
          this.$message({
            message: "医疗收据编号重复录入",
            type: "error"
          });
          obj.mainfeeno = null;
        }
      }
    },
    // 获取同一立案下的所有编号
    searchNum() {
      post(service.getDeffNum, {
        bodys: {
          clmno: this.$route.query.rgtno,
          customerno: this.$route.query.customerno
        }
      }).then(result => {
        if (result.data.headers.code == "200") {
          this.getNumList = result.data.bodys.rows;
        }
      });
    },
    getSum(obj) {
      if (obj.number >= 0) {
        obj.number = this.toFixeds(parseFloat(obj.number), 2);
      } else {
        obj.number = null;
      }
      if (obj.fee >= 0) {
        obj.fee = this.toFixeds(parseFloat(obj.fee), 2);
      } else {
        obj.fee = null;
      }

      if (obj.fee && obj.number) {
        obj.price = this.toFixeds(accMul(obj.fee, obj.number), 2);
        if (obj.price.length > 16) {
          this.$message.error("费用金额超出限制，请重新调整单价或数量！");
          obj.price = null;
        }
      }
    },
    getFeeItem() {
      post(service.getCodeList, {
        codetype: ["llfeeitem", "deductiontype"]
      }).then(res => {
        this.fyxLists = res.data.bodys.llfeeitem;
        this.koufeiTypes = res.data.bodys.deductiontype;
      });
    },
    // ===============扣费名称明细Start===================
    getkfdata(row, index) {
      this.kfStatez = index;
      this.kfname = "";
      this.kfcode = row.deducttypes;
      this.kfpageDataz2.startPage = 0;
      this.kfpageDataz2.endPage = 100;
      post(service.llfeeitem, {
        pagestart: this.kfpageDataz2.startPage,
        pageend: this.kfpageDataz2.endPage,
        code: row.deducttypes,
        likename: ""
      }).then(res => {
        this.koufeiLists = res.data.bodys;
        this.newkoufeiLists.push(this.koufeiLists);
        this.newkoufeiLists[index] = res.data.bodys;
      });
    },
    getkoufeinum() {
      this.changeKFname();
    },
    filteredKF(val) {
      this.kfpageDataz2.startPage = 0;
      this.kfpageDataz2.endPage = 100;
      if (val != "") {
        for (let key in this.kfDetail) {
          if (this.kfStatez == key) {
            this.kfDetail[key].deductnames = val;
            this.kfname = val;
            this.changeKFname(val);
          }
        }
      }
    },
    showsfy() {},
    // 扣费类型code 获取扣费名称 likename:模糊查询
    changeKFname() {
      for (let key in this.kfDetail) {
        post(service.llfeeitem, {
          pagestart: this.kfpageDataz2.startPage,
          pageend: this.kfpageDataz2.endPage,
          code: this.kfDetail[key].deducttypes,
          likename: this.kfDetail[key].deductnames || ""
        }).then(res => {
          // this.koufeiLists = res.data.bodys;
          // this.newkoufeiLists.push(this.koufeiLists);
          this.koufeiLists = res.data.bodys;
          this.newkoufeiLists.push(this.koufeiLists);
          this.newkoufeiLists[key] = res.data.bodys;
        });
      }
    },
    changeKFItem(row) {
      row.deductnames = ""; // 改变费用项名称 清空对应的费用名称明细
    },
    // 扣费名称  下拉加载更多
    loadmorezz1() {
      this.kfpageDataz2.startPage += 100;
      this.kfpageDataz2.endPage += 100;
      post(service.llfeeitem, {
        pagestart: this.kfpageDataz2.startPage,
        pageend: this.kfpageDataz2.endPage,
        code: this.kfcode,
        likename: this.kfname || ""
      }).then(res => {
        this.koufeiLists = [...this.koufeiLists, ...res.data.bodys];
        this.newkoufeiLists.push(this.koufeiLists);
        this.newkoufeiLists[this.kfStatez] = [
          ...this.koufeiLists,
          ...res.data.bodys
        ];
      });
    },
    // ===============扣费名称明细End===================
    // ===============费用名称明细Start===================
    getfydata(row, index) {
      this.fyStatez = index;
      this.fyname = "";
      this.fycode = row.feeitemname;
      this.fypageDataz2.startPage = 0;
      this.fypageDataz2.endPage = 100;
      post(service.llfeeitem, {
        pagestart: this.fypageDataz2.startPage,
        pageend: this.fypageDataz2.endPage,
        code: row.feeitemname,
        likename: ""
      }).then(res => {
        this.fyDetailList1 = res.data.bodys;
        this.newfyDetailList1.push(this.fyDetailList1);
        this.newfyDetailList1[index] = res.data.bodys;
      });
    },
    getfeiyongnum() {
      this.changeFYname();
    },
    filteredFY(val) {
      this.fypageDataz2.startPage = 0;
      this.fypageDataz2.endPage = 100;
      if (val != "") {
        for (let key in this.fyDetail) {
          if (this.fyStatez == key) {
            this.fyDetail[key].feeitemdetil = val;
            this.fyname = val;
            this.changeFYname(val);
          }
        }
      }
    },
    // 费用项名称 code 获取费用名称明细  likename:模糊查询
    changeFYname(key) {
      key.feeitemdetil = ''
      // for (let key in this.fyDetail) {
      //   post(service.llfeeitem, {
      //     pagestart: this.fypageDataz2.startPage,
      //     pageend: this.fypageDataz2.endPage,
      //     code: this.fyDetail[key].feeitemname,
      //     likename: this.fyDetail[key].feeitemdetil || ""
      //   }).then(res => {
      //     this.fyDetailList1 = res.data.bodys;
      //     this.newfyDetailList1.push(this.fyDetailList1);
      //     this.newfyDetailList1[key] = res.data.bodys;
      //   });
      // }
      post(service.llfeeitem, {
          pagestart: this.fypageDataz2.startPage,
          pageend: this.fypageDataz2.endPage,
          code: key.feeitemname,
          // likename: key.feeitemname
        }).then(res => {
          this.fyDetailList1 = res.data.bodys;
          this.newfyDetailList1.push(this.fyDetailList1);
          this.newfyDetailList1[key] = res.data.bodys;
        });
    },
    changeFeeItem(row) {
      row.feeitemdetil = ""; // 改变费用项名称 清空对应的费用名称明细
    },
    loadmorezz() {
      this.fypageDataz2.startPage += 100;
      this.fypageDataz2.endPage += 100;
      post(service.llfeeitem, {
        pagestart: this.fypageDataz2.startPage,
        pageend: this.fypageDataz2.endPage,
        code: this.fycode,
        likename: this.fyname || ""
      }).then(res => {
        this.fyDetailList1 = [...this.fyDetailList1, ...res.data.bodys];
        this.newfyDetailList1.push(this.fyDetailList1);
        this.newfyDetailList1[this.fyStatez] = [
          ...this.fyDetailList1,
          ...res.data.bodys
        ];
      });
    },
    // ===============费用名称明细End===================
    // 获取医疗账单信息
    getCfee() {
      post(service.getcfee, {
        bodys: {
          // 1909120081801
          rgtno: this.$route.query.rgtno || this.objForm.rgtno
          // JSON.parse(this.$route.params.dataOfTable).rgtno
        }
      }).then(result => {
        if (result.data.headers.code == "200") {
          this.searchNum();
          this.commonOutpatient = result.data.bodys.rows[0].MenZhen;
          this.commonHospital = result.data.bodys.rows[0].ZhuYuan;
          localStorage.setItem(
            "comData1",
            JSON.stringify(this.commonOutpatient)
          );
          localStorage.setItem("comData2", JSON.stringify(this.commonHospital));
          this.hospitalName = result.data.bodys.rows[0].hospitalcode; // 医院名称
          this.outhospital = result.data.bodys.rows[0].outhospitaldate; // 出院日期
          this.inhospital = result.data.bodys.rows[0].inhospitaldate; // 入院日期
          this.death = result.data.bodys.rows[0].deathdate; // 入院日期
          this.accent = result.data.bodys.rows[0].accdate; // 出险日期
          this.ordTime =
            sumDays(
              result.data.bodys.rows[0].inhospitaldate,
              result.data.bodys.rows[0].outhospitaldate
            ) + 1; //普通病房天数
          // 普通病房天数修改时上下浮动0.5
          for (let key = 0; key < this.commonHospital.length; key++) {
            if (
              this.commonHospital[key].hospenddate &&
              this.commonHospital[key].hospstartdate
            ) {
              if (
                this.commonHospital[key].hospenddate ==
                this.commonHospital[key].hospstartdate
              ) {
                this.realDate[key] =
                  sumDays(
                    this.commonHospital[key].hospstartdate,
                    this.commonHospital[key].hospenddate
                  ) + 1;
              } else {
                this.realDate[key] = sumDays(
                  this.commonHospital[key].hospstartdate,
                  this.commonHospital[key].hospenddate
                );
              }
              // this.realDate[key] = this.commonHospital[key].realhospdate;
            }
          }
        } else {
          this.searchNum();
        }
      });
    },
    // 自定义排序
    changeSort(column, prop, order) {
      if (column.order === "descending") {
        this.commonOutpatient.sort(function(a, b) {
          if (a.feedate < b.feedate) {
            return -1;
          } else if (a.feedate > b.feedate) {
            return 1;
          } else {
            return 0;
          }
        });
      } else if (column.order === "ascending") {
        this.commonOutpatient.sort(function(a, b) {
          if (a.feedate > b.feedate) {
            return -1;
          } else if (a.feedate < b.feedate) {
            return 1;
          } else {
            return 0;
          }
        });
      }
    },
    deletez1(row, index) {
      // 删除普通门诊
      console.log(row.ecmno, index);
      post(service.deletefeemain, {
        bodys: {
          // clmno: JSON.parse(this.$route.params.dataOfTable).rgtno,
          clmno: this.$route.query.rgtno,
          mainfeeno: row.mainfeeno
        }
      }).then(res => {
        this.$message({
          message: "删除成功",
          type: "success"
        });
        if (this.currentPagez1 == 1) {
          this.commonOutpatient.splice(index, 1);
        } else {
          this.commonOutpatient.splice(
            index + (this.currentPagez1 - 1) * 10,
            1
          );
        }
      });
    },
    // commonHospital
    deletez2(row, index) {
      // 删除普通住院
      post(service.deletefeemain, {
        bodys: {
          // clmno: JSON.parse(this.$route.params.dataOfTable).rgtno,
          clmno: this.$route.query.rgtno,
          mainfeeno: row.mainfeeno
        }
      }).then(res => {
        this.$message({
          message: "删除成功",
          type: "success"
        });
        if (this.currentPagez2 == 1) {
          this.commonHospital.splice(index, 1);
        } else {
          this.commonHospital.splice(index + (this.currentPagez2 - 1) * 10, 1);
        }
        // this.commonHospital.splice(index, 1);
        // this.getCfee();
      });
    },
    deletez3(index) {
      // 删除普通门诊
      if (this.fyDetail.length != 1) {
        this.fyDetail.splice(index, 1);
      } else {
        this.$message.error("费用金额至少保留一条");
      }
    },
    deletez4(index) {
      // 删除住院
      this.kfDetail.splice(index, 1);
    },
    addRowz1() {
      // 普通门诊
      if (this.commonOutpatient.length == 0) {
        this.commonOutpatient.push({
          feetype: "A",
          clmno: this.objForm.rgtno,
          mainfeeno: null, //收据编号
          hospitalcode: this.objForm.hospitalname, // 医院名称
          feedate: null, // 就诊时间
          billmoney: null, // 费用总金额
          selfamnt: 0, // 自费金额
          socifee: 0, // 统筹附加金额
          sociflag: "1", // 社保标志
          otherfee: 0, // 其他补偿
          refusemoney: null, // 扣费明细
          indemnity: null, // 收据赔付金额
          operation: "0", // 是否手术
          specselfamnt: 0,
          ecmno: this.commonOutpatient.length + 1
        });
      } else {
        this.commonOutpatient.push({
          feetype: "A",
          clmno: this.objForm.rgtno,
          mainfeeno: null, //收据编号
          hospitalcode: this.commonOutpatient[this.commonOutpatient.length - 1]
            .hospitalcode, // 医院名称
          feedate: null, // 就诊时间
          billmoney: null, // 费用总金额
          selfamnt: 0, // 自费金额
          socifee: 0, // 统筹附加金额
          sociflag: "1", // 社保标志
          otherfee: 0, // 其他补偿
          refusemoney: null, // 扣费明细
          indemnity: null, // 收据赔付金额
          operation: "0", // 是否手术
          specselfamnt: 0,
          ecmno: this.commonOutpatient.length + 1
        });
      }
      this.hospitalListsnamez = "";
      this.pageDataz1.startPage = 0;
      this.pageDataz1.endPage = 100;
      this.getHospitalsz();
    },
    addRowz2() {
      // 住院
      if (this.commonHospital.length == 0) {
        this.commonHospital.push({
          feetype: "B",
          clmno: this.objForm.rgtno,
          mainfeeno: null, //收据编号
          hospitalcode: this.objForm.hospitalname, // 医院名称
          hospstartdate: "", // 入院日期
          hospenddate: "", // 出院日期
          billmoney: null, // 费用总金额
          realhospdate: "", // 普通病房天数
          imhospdate: null, // 重症病房天数
          selfamnt: 0, // 自费金额
          socifee: 0, // 统筹附加金额
          sociflag: "1", // 社保标志
          otherfee: 0, // 其他补偿
          refusemoney: null, // 扣费明细
          indemnity: null, // 收据赔付金额
          operation: "0", // 是否手术
          specselfamnt: 0,
          ecmno: this.commonHospital.length + 1
        });
      } else {
        this.commonHospital.push({
          feetype: "B",
          clmno: this.objForm.rgtno,
          mainfeeno: null, //收据编号
          hospitalcode: this.commonHospital[this.commonHospital.length - 1]
            .hospitalcode, // 医院名称
          hospstartdate: "", // 入院日期
          hospenddate: "", // 出院日期
          billmoney: null, // 费用总金额
          realhospdate: "", // 普通病房天数
          imhospdate: null, // 重症病房天数
          selfamnt: 0, // 自费金额
          socifee: 0, // 统筹附加金额
          sociflag: "1", // 社保标志
          otherfee: 0, // 其他补偿
          refusemoney: null, // 扣费明细
          indemnity: null, // 收据赔付金额
          operation: "0", // 是否手术
          specselfamnt: 0,
          ecmno: this.commonHospital.length + 1
        });
      }
      this.hospitalListsnamez1 = "";
      (this.pageDataz2.startPage = 0),
        (this.pageDataz2.endPage = 100),
        this.getHospitalsz1();
    },
    addRowItemz1() {
      // 普通门诊的费用明细
      this.fyDetail.push({
        feeitemname: "", // 费用项名称
        feeitemdetil: "", // 费用名称明细
        fee: "", //单价
        number: "", //数量
        price: "", //费用金额
        specifications: "", //规格与单价
        healthcaretype: "" //医保类别
      });
    },
    addRowItemz2() {
      this.kfDetail.push({
        deductnames: "", // //扣费名称
        deductreasontypes: "", // 扣费原因类型
        deductemark: "", //备注
        deductreasons: "", // 扣费原因
        deductfee: "", //扣费金额
        deducttypes: "" // 扣费类型MenZhen
      });
    },
    // 获取门诊详细
    getDetailz1(data, index) {
      if (!data.mainfeeno) {
        this.$message({
          message: "请先录入收据编号",
          type: "error"
        });
      } else {
        this.dialogVisible = true;
        this.getFeeItem();
        // 门诊索引
        localStorage.setItem("detailIndex", data.ecmno - 1);
        // 医疗单证类型（A,B）
        localStorage.setItem("detailState", data.feetype);
        // 判断是新增还是已有明细
        if (data.medicinerequestreceiptlist && data.medicinerequestdeductlist) {
          // 费用明细获取
          this.fyDetail = data.medicinerequestreceiptlist;
          // 扣费明细获取
          this.kfDetail = data.medicinerequestdeductlist;
        } else {
          this.fyDetail = [];
          this.kfDetail = [];
          // 如果没有明细则默认增加一条费用明细
          if (this.fyDetail.length == 0) {
            this.addRowItemz1();
          }
        }
      }
    },
    // 获取住院详细
    getDetailz2(data, index) {
      if (!data.mainfeeno) {
        this.$message({
          message: "请先录入收据编号",
          type: "error"
        });
      } else {
        this.dialogVisible = true;
        this.getFeeItem();
        // 住院索引
        localStorage.setItem("detailIndex1", data.ecmno - 1);
        // 医疗单证类型（A,B）
        localStorage.setItem("detailState", data.feetype);
        // 判断是新增还是已有明细
        if (data.medicinerequestreceiptlist && data.medicinerequestdeductlist) {
          console.log("DDDD", data.medicinerequestreceiptlist);
          // 费用明细获取
          this.fyDetail = data.medicinerequestreceiptlist;
          // 扣费明细获取
          this.kfDetail = data.medicinerequestdeductlist;
        } else {
          console.log("DDDD1", data.medicinerequestreceiptlist);
          this.fyDetail = [];
          this.kfDetail = [];
          // 如果没有明细则默认增加一条费用明细
          if (this.fyDetail.length == 0) {
            this.addRowItemz1();
          }
        }
      }
    },
    //医疗单证明细录入 // 门诊
    beSure() {
      // 通过明细获取费用总金额跟扣费明细
      // let _this = this;
      if (this.kfDetail.length == 0 && this.fyDetail.length == 0) {
        this.$message({
          message: "请添加一条明细记录",
          type: "error"
        });
      } else if (checkLfor1(this.fyDetail) || checkLfor2(this.kfDetail)) {
        this.$message({
          message: checkLfor1(this.fyDetail)
            ? checkLfor1(this.fyDetail)
            : checkLfor2(this.kfDetail),
          type: "error"
        });
      } else {
        let key = localStorage.getItem("detailIndex");
        let key1 = localStorage.getItem("detailIndex1");
        if (localStorage.getItem("detailState") == "A") {
          this.$message.success("操作成功！");
          this.dialogVisible = false;
          // 费用明细
          this.commonOutpatient[key].medicinerequestreceiptlist = this.fyDetail;
          // 扣费明细
          this.commonOutpatient[key].medicinerequestdeductlist = this.kfDetail;
          // 费用总金额计算
          this.commonOutpatient[key].billmoney = 0;
          this.commonOutpatient[key].medicinerequestreceiptlist.forEach(
            item => {
              this.commonOutpatient[key].billmoney += new Number(item.price);
            }
          );
          // 扣费金额计算
          this.commonOutpatient[key].refusemoney = 0;
          this.commonOutpatient[key].medicinerequestdeductlist.forEach(item => {
            this.commonOutpatient[key].refusemoney += new Number(
              item.deductfee
            );
          });
          // 收据赔付金额计算
          this.commonOutpatient[key].indemnity = this.toFixeds(
            this.commonOutpatient[key].billmoney -
              this.commonOutpatient[key].socifee -
              this.commonOutpatient[key].refusemoney -
              this.commonOutpatient[key].otherfee -
              this.commonOutpatient[key].selfamnt,
            2
          );
        } else if (localStorage.getItem("detailState") == "B") {
          this.$message.success("操作成功！");
          this.dialogVisible = false;
          // 费用明细
          this.commonHospital[key1].medicinerequestreceiptlist = this.fyDetail;
          // 扣费明细
          this.commonHospital[key1].medicinerequestdeductlist = this.kfDetail;
          // 费用总金额计算
          this.commonHospital[key1].billmoney = 0;
          this.commonHospital[key1].medicinerequestreceiptlist.forEach(item => {
            this.commonHospital[key1].billmoney += new Number(item.price);
          });
          // 扣费金额计算
          this.commonHospital[key1].refusemoney = 0;
          this.commonHospital[key1].medicinerequestdeductlist.forEach(item => {
            this.commonHospital[key1].refusemoney += new Number(item.deductfee);
          });
          // 收据赔付金额计算
          this.commonHospital[key1].indemnity = this.toFixeds(
            this.commonHospital[key1].billmoney -
              this.commonHospital[key1].socifee -
              this.commonHospital[key1].refusemoney -
              this.commonHospital[key1].otherfee -
              this.commonHospital[key1].selfamnt,
            2
          );
        }
      }
    },
    toAddFiling() {
      console.log(JSON.stringify(this.commonOutpatient));
      console.log(localStorage.getItem("comData1"));
      if (
        JSON.stringify(this.commonOutpatient) !=
          localStorage.getItem("comData1") ||
        JSON.stringify(this.commonHospital) != localStorage.getItem("comData2")
      ) {
        this.$confirm("页面信息未保存，是否确认不保存离开本页面？", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        })
          .then(() => {
            var comout = this.commonOutpatient.map(item => {
              return item.mainfeeno;
            });
            var comhos = this.commonHospital.map(item => {
              return item.mainfeeno;
            });
            var common = comout.concat(comhos);
            post(service.medicinecheckdelete, {
              bodys: {
                mainfeenolist: common,
                clmno: this.$route.query.rgtno
              }
            });
            this.isShowhospital = false;
          })
          .catch(() => {});
      } else {
        this.isShowhospital = false;
      }
    },
    codeToname: function(obj, arr) {
      var a = null;
      arr.forEach(element => {
        if (element.code === obj) {
          a = element.name;
        }
      });
      return a;
    },
    //  获取医疗单证列表
    // 录入医疗��证
    applyTask() {
      if (
        this.commonOutpatient.length == 0 &&
        this.commonHospital.length == 0
      ) {
        this.$message({
          message: "请添加一条数据",
          type: "error"
        });
      } else if (
        checkMfor(this.commonOutpatient, "1") ||
        checkMfor(this.commonHospital, "2")
      ) {
        this.$message({
          message: checkMfor(this.commonOutpatient, "1")
            ? checkMfor(this.commonOutpatient, "1")
            : checkMfor(this.commonHospital, "2"),
          type: "error"
        });
      } else {
        var allArr = this.commonOutpatient.concat(this.commonHospital);
        post(service.submitcfee, {
          bodys: {
            customerno: this.$route.query.customerno,
            operator: localStorage.getItem("userCode"),
            mngcom: localStorage.getItem("comCode"),
            commonMedicineRequest: allArr,
            remark: "1"
          }
        }).then(result => {
          if (result.data.headers.code === "200") {
            this.$message({
              message: result.data.headers.message,
              type: "success"
            });
            this.getCfee();
          } else {
            this.$message({
              message: result.data.headers.message,
              type: "error"
            });
          }
        });
      }
    },
    indexMethodz1(index) {
      return index + 1 + (this.currentPagez1 - 1) * 10;
    },
    indexMethodz2(index) {
      return index + 1 + (this.currentPagez2 - 1) * 10;
    },
    indexMethodz3(index) {
      return index + 1 + (this.currentPagez3 - 1) * 10;
    },
    indexMethodz4(index) {
      return index + 1 + (this.currentPagez4 - 1) * 10;
    },
    handleSizeChangez1(val) {
      this.pagesizez1 = val;
    },
    handleCurrentChangez1(val) {
      this.currentPagez1 = val;
    },
    handleSizeChangez2(val) {
      this.pagesizez2 = val;
    },
    handleCurrentChangez2(val) {
      this.currentPagez2 = val;
    },
    handleSizeChangez3(val) {
      this.pagesizez3 = val;
    },
    handleCurrentChangez3(val) {
      this.currentPage3 = val;
    },
    handleSizeChangez4(val) {
      this.pagesizez4 = val;
    },
    handleCurrentChangez4(val) {
      this.currentPagez4 = val;
    }
  }
};
</script>
<style lang="less" scoped>
.mels {
  /deep/ .el-tabs__nav-scroll {
    width: 350px;
    margin: 0 auto;
  }
  /deep/ .el-tabs__item {
    font-size: 20px;
  }
}

.diamh {
  /deep/.el-date-editor.el-input {
    width: 100% !important;
  }
}
.twoTitle {
  border-left: 2px solid #409eff;
  padding-left: 10px;
  font-size: 16px;
}
.generalMedical {
  .el-select,
  .generalMedical .el-input {
    width: 100% !important;
  }
  /deep/.el-input-number.is-controls-right .el-input__inner {
    width: 100% !important;
  }
  /deep/ .el-input-number .el-input {
    width: auto !important;
  }
  /deep/ .el-input-number--medium {
    width: auto !important;
  }
}
/deep/.el-dialog__header {
  padding: 0;
}
.jiuzhens {
  position: absolute;
  top: 0;
  left: 86%;
  border: none;
  padding: 10px 0px;
}
.jiuzhens:focus,
.jiuzhens:hover {
  color: none;
  background: none;
}
//  ----Start---- 备注样式
.lable {
  width: auto;
  margin-top: 0;
  display: block !important;
}
.rightItem {
  background: rgba(6, 155, 255, 0.6);
}
.leftItem {
  margin-right: 10px;
  position: relative;
}
.poBtn {
  position: absolute;
  right: -3%;
  top: 50px;
  padding: 5px;
  color: #0673ff;
  z-index: 999;
}

.innerLable1 {
  background: #fff;
  margin: 10px 15px 20px;
  height: auto;
  width: auto;
}
//  ----End---- 备注样式
.addFiling {
  margin: 10px;
  // margin-right: 0;
  margin-bottom: 0;
  box-sizing: border-box;

  .left {
    width: 90%;
    float: left;
  }

  .right {
    padding: 0 5px;
    text-align: center;
    float: right;
    width: 7%;
    border: 1px solid #cccccc;
    border-radius: 100px;
    background: #fff;
    position: absolute;
    right: 1%;
    margin-top: 20px;
    p {
      padding-bottom: 8px;
    }
    p:first-of-type {
      margin-top: 45px;
    }
    p:last-of-type {
      margin-bottom: 100px;
    }
    .downArrow {
      position: absolute;
      top: -25px;
      left: 50%;
      transform: translateX(-50%);
    }
    .upArrow {
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      bottom: 10px;
    }

    .top {
      position: absolute;
      left: 50%;
      transform: translateX(-50%);
      bottom: 30px;
    }

    .btn_text {
      border-bottom: 1px dotted #cccccc;
    }
  }

  .header {
    background-color: #0673ff;
    height: 50px;
    line-height: 50px;
    border-radius: 25px 25px 0 0;
    padding: 0 30px;
    overflow: hidden;
    color: #fff;
    font-size: 20px;
    font-family: Source Han Sans CN;
    i {
      font-size: 30px;
      float: right;
      margin-top: 19px;
    }
  }
  .work_queue {
    position: relative;
    span {
      display: inline-block;
      background-color: #0673ff;
      color: #fff;
      padding: 0 15px;
      height: 33px;
      line-height: 33px;
      border-radius: 10px 10px 0 0;
    }
    .box {
      width: 0;
      height: 0;
      border-left: 10px solid transparent;
      border-right: 10px solid transparent;
      border-top: 10px solid #0673ff;
      position: absolute;
      top: 33px;
      left: 15px;
      z-index: 999;
    }
  }
  .block {
    background-color: #fff;
    height: 80px;
    padding-top: 27px;
    box-sizing: border-box;
  }
  .el-collapse {
    margin-bottom: 20px;
  }
  .box {
    width: 0;
    height: 0;
    border-left: 10px solid transparent;
    border-right: 10px solid transparent;
    border-top: 10px solid #0673ff;
    position: absolute;
    z-index: 999;
  }
  .botton_box {
    position: fixed;
    bottom: -6.5px;
    width: 74%;
    height: 74px;
    line-height: 74px;
    background-image: url("../../assets/images/filing/footer2.png");
    background-size: 100% 60px;
    background-repeat: no-repeat;
    background-position: center;
    z-index: 1000;
  }
}
</style>
<style lang="less">
.addFiling {
  .el-row {
    &:first-child {
      padding-top: 20px;
    }
    &:last-child {
      padding-top: 0;
      margin-bottom: 0;
    }
    padding-top: 0px;
  }
  .grid-content {
    border-radius: 4px;
    min-height: 36px;
    .report {
      display: inline-block;
      width: 180px;
      height: 33px;
      text-align: center;
      line-height: 33px;
      background-color: #0673ff;
      color: #fff;
      font-size: 12px;
      font-family: Source Han Sans CN;
      border-radius: 25px;
    }
  }
  .row-bg {
    padding: 10px 0;
    background-color: #f9fafc;
  }
}
.addFiling .place .el-input__inner {
  width: 100%;
}

.addFiling {
  .el-input {
    width: 85%;
  }
  .el-select {
    width: 85%;
    .el-input {
      width: 100%;
    }
  }
  .place {
    display: flex;
    .el-form-item__error {
      white-space: nowrap;
    }
    .el-select {
      width: 100%;
    }
    .risk_address {
      .el-form-item__content {
        margin-left: 8px !important;
      }
    }
    .place_des {
      .el-input__inner {
        width: 230px;
      }
    }
  }
  .bank {
    display: flex;
    .bank_style {
      .el-form-item__content {
        margin-left: 8px !important;
      }
    }
    .el-select {
      width: 180px;
    }
  }
  .apply_address {
    .el-input__inner {
      width: 100%;
    }
    display: flex;
    .full {
      .el-input {
        width: 220px;
      }
    }
    .el-select {
      width: 22%;
    }
  }
  .address {
    .el-input__inner {
      width: 100%;
    }
    display: flex;
    .el-select {
      width: 100%;
    }
    .el-form-item__error {
      white-space: nowrap;
    }
    .address_style {
      .el-form-item__content {
        margin-left: 30px !important;
      }
    }
    // .el-input {
    //   width: 150px;
    // }
    .full {
      .el-input {
        width: 210px;
      }
    }
  }
  .special {
    .el-input__inner {
      text-transform: uppercase;
    }
  }
  // 备注表格
  .leftItem .el-table .cell {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  }
  .reviewInformation .el-textarea .el-input__count {
    // visibility: hidden;
    top: 2px;
  }
  //  End
  .el-collapse-item__arrow {
    display: none;
  }

  .el-collapse-item__header {
    background-color: #0673ff;
    height: 30px;
    line-height: 30px;
    border-radius: 10px 10px 0 0;
    padding: 0 15px;
    overflow: hidden;
    color: #fff;
    font-size: 16px;
    font-family: Source Han Sans CN;
  }

  .el-collapse-item__content {
    padding-bottom: 0px;
  }
}
</style>
<style lang="less">
.addFiling .el-tabs--card > .el-tabs__header .el-tabs__item.is-active {
  background-color: #0673ff;
  border-bottom: none;
  border-radius: 8px 8px 0 0;
  color: #fff;
}

.addFiling .el-tabs__header {
  margin: 0;
}

.addFiling .el-tabs--card > .el-tabs__header .el-tabs__item {
  background-color: #fff;
  color: #999999;
}
.addFiling .el-collapse-item__wrap {
  padding: 0 10px;
}
.confirmButton {
  padding: 9px 28px;
}
.cancelButton {
  padding: 9px 28px;
}
// .addFiling .el-input__inner{
//   width: 85%;
// }
.addFiling .bank .el-input__inner {
  width: 100%;
}
.addFiling .el-date-editor.el-input,
.el-date-editor.el-input__inner {
  width: 85% !important;
}
.addFiling .el-checkbox__inner {
  z-index: 0;
}
.addFiling .el-tabs--card > .el-tabs__header .el-tabs__nav {
  border: none;
}

.addFiling {
  .place {
    .select {
      width: 200px;
    }
    .el-input__prefix,
    .el-input__suffix {
      right: 1px;
    }
  }
  .apply_address {
    .el-input__prefix,
    .el-input__suffix {
      right: 1px;
    }
  }
  .address {
    .el-input__prefix,
    .el-input__suffix {
      right: 1px;
    }
  }
  .bank {
    .el-select {
      width: 100%;
    }
    .el-input__prefix,
    .el-input__suffix {
      right: 1px;
    }
  }
  .el-cascader {
    .el-input__prefix,
    .el-input__suffix {
      right: 1px;
    }
  }
}
.addFiling .el-cascader {
  width: 85%;
  .el-input {
    width: 100%;
  }
}
.addFiling .el-select .el-input__inner {
  width: 100%;
}
.addFiling .el-cascader .el-input__inner {
  width: 100%;
}
.addFiling .el-button.is-round {
  padding: 7px 13px;
}
.addFiling .occuprptStyle .el-form-item__label {
  line-height: 20px;
}
.addFiling .el-tabs__item {
  height: 33px;
  line-height: 33px;
}
.addFiling {
  .reasoncodeSty {
    .el-form-item__error {
      top: 72%;
    }
  }
}
</style>
